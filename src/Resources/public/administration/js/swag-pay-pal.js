(this.webpackJsonp=this.webpackJsonp||[]).push([["swag-pay-pal"],{"+B3i":function(e,a){e.exports='{% block swag_paypal_pos_account %}\n    <sw-card class="swag-paypal-pos-account"\n             :title="$tc(\'sw-sales-channel.detail.titleAccount\')"\n             :isLoading="isLoading">\n\n        {% block swag_paypal_pos_account_grid %}\n            <sw-container columns="min-content 1fr" align="center">\n\n                {% block swag_paypal_pos_account_grid_logo %}\n                    <img class="swag-paypal-pos-account__logo"\n                         alt="iZettle Logo"\n                         :src="\'/swagpaypal/static/img/paypal-pos-logo.svg\' | asset">\n                {% endblock %}\n\n                {% block swag_paypal_pos_account_grid_container %}\n                    <div class="swag-paypal-pos-account__container">\n\n                        {% block swag_paypal_pos_account_grid_container_info %}\n                            <div class="swag-paypal-pos-account__account-info">\n\n                                {% block swag_paypal_pos_account_grid_container_info_name %}\n                                    <div class="swag-paypal-pos-account__name">\n                                        {{ accountName }}\n                                    </div>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_account_grid_container_info_email %}\n                                    <div class="swag-paypal-pos-account__email">\n                                        {{ accountEmail }}\n                                    </div>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_account_grid_container_info_link %}\n                                    <a href="https://my.izettle.com"\n                                       target="_blank"\n                                       class="link swag-paypal-pos-account__manage-link">\n\n                                        {% block swag_paypal_pos_account_grid_container_info_link_text %}\n                                            {{ $tc(\'swag-paypal-pos.account.manageAccount\') }}\n                                        {% endblock %}\n\n                                        {% block swag_paypal_pos_account_grid_container_info_link_icon %}\n                                            <sw-icon class="swag-paypal-pos-account__manage-link-icon"\n                                                     name="default-action-external"\n                                                     size="10px">\n                                            </sw-icon>\n                                        {% endblock %}\n                                    </a>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_account_grid_container_info_edit_button %}\n                                    {# ToDo PPI-109 - Implement edit connection functionality #}\n                                    <sw-button v-if="false"\n                                               class="swag-paypal-pos-account__edit-connection-button"\n                                               size="small"\n                                               block>\n                                        {{ $tc(\'swag-paypal-pos.account.editConnection\') }}\n                                    </sw-button>\n                                {% endblock %}\n                            </div>\n                        {% endblock %}\n\n                        {% block swag_paypal_pos_account_grid_container_status %}\n                            <div class="swag-paypal-pos-account__status-container">\n\n                                {% block swag_paypal_pos_account_grid_container_status_label %}\n                                    <sw-label class="swag-paypal-pos-account__status-label"\n                                              size="medium"\n                                              appearance="pill"\n                                              :variant="connectionStatusVariant"\n                                              :ghost="false"\n                                              :caps="false">\n\n                                        {% block swag_paypal_pos_account_grid_container_status_label_badge %}\n                                            <sw-color-badge class="swag-paypal-pos-account__status-color-badge"\n                                                            rounded\n                                                            :variant="connectionStatusVariant">\n                                            </sw-color-badge>\n                                        {% endblock %}\n\n                                        {% block swag_paypal_pos_account_grid_container_status_label_text %}\n                                            <span class="swag-paypal-pos-account__status-text">\n                                                {{ connectionStatusText }}\n                                            </span>\n                                        {% endblock %}\n                                    </sw-label>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_account_grid_container_status_updated %}\n                                    <div v-if="lastRun"\n                                         class="swag-paypal-pos-account__status-updated">\n                                        {{ $tc(\'swag-paypal-pos.account.lastUpdated\') }} {{ lastRun.updatedAt | date({\n                                            hour: \'2-digit\',\n                                            minute: \'2-digit\',\n                                            second: \'2-digit\',\n                                            day: \'2-digit\',\n                                            month: \'short\',\n                                            year: \'numeric\'\n                                        }) }}\n                                    </div>\n                                {% endblock %}\n                            </div>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},"+M/s":function(e,a,n){var t=n("QxFK");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("03f91708",t,!0,{})},"+Mrb":function(e,a){e.exports='{% block sw_sales_channel_grid_columns_icon %}\n    <sw-grid-column\n            v-if="isPayPalPosSalesChannel(item.id)"\n            class="sw-sales-channel-modal-grid__icon-column"\n            flex="85px"\n            dataIndex="icon">\n        <span class="sw-sales-channel-modal-grid__icon" @click="onOpenDetail(item.id)">\n             <img class="swag-paypal-pos-modal-grid__icon"\n                  :src="\'swagpaypal/static/img/paypal-pos-logo.svg\' | asset">\n        </span>\n    </sw-grid-column>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}'},"+TPH":function(e,a){e.exports='{% block swag_paypal_pos_wizard_sync_prices %}\n    <div class="swag-paypal-pos-wizard-sync-prices">\n\n        {% block swag_paypal_pos_wizard_sync_prices_header %}\n            <div class="swag-paypal-pos-wizard-sync-prices__headline">\n                {{ $tc(\'swag-paypal-pos.wizard.syncPrices.header\') }}\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_sync_prices_description_input %}\n            <swag-paypal-pos-boolean-radio\n                v-model="salesChannel.extensions.paypalPosSalesChannel.syncPrices"\n                :label="$tc(\'swag-paypal-pos.wizard.syncPrices.description\')"\n                :optionTrue="optionTrue"\n                :optionFalse="optionFalse">\n            </swag-paypal-pos-boolean-radio>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_sync_prices_disclaimer %}\n            <div class="swag-paypal-pos-wizard-sync-prices__disclaimer">\n                {{ $tc(\'swag-paypal-pos.wizard.syncPrices.disclaimer\') }}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"/DM6":function(e,a,n){},"0Uy6":function(e,a,n){},"0dqU":function(e,a,n){},"1yHx":function(e,a,n){},"23L4":function(e,a,n){},"29Gb":function(e,a,n){var t=n("F/8Z");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("5d067cd9",t,!0,{})},"2vrd":function(e,a,n){},"3Q6Q":function(e,a,n){var t=n("kBLT");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("e65ea110",t,!0,{})},"4OKV":function(e,a){e.exports='{% block sw_settings_content_card_slot_plugins %}\n    {% parent %}\n\n    <sw-settings-item :label="$tc(\'swag-paypal.general.mainMenuItemGeneral\')"\n                      :to="{ name: \'swag.paypal.index\' }"\n                      :backgroundEnabled="false">\n        <template #icon>\n            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="40" viewBox="0 0 48 48" class="sw-settings-index__paypal-icon">\n                <g fill="none" fill-rule="evenodd">\n                    <path fill="#013088" d="M1.36196923,45.9634625 C0.525969231,45.9634625 -0.113723077,45.2159 0.0165846154,44.3907125 L6.62843077,2.599775 C6.80104615,1.4978375 7.75381538,0.6878375 8.87073846,0.6878375 L24.7445846,0.6878375 C30.2124308,0.6878375 34.4855077,1.8387125 36.8530462,4.5269 C39.0005846,6.9687125 39.6284308,9.6653375 39.0056615,13.6259 C39.8924308,14.0946875 40.6522769,14.670125 41.2648923,15.3636875 C43.2888923,17.66375 43.6848923,20.934125 42.9199692,24.8508125 C41.0888923,34.2265625 34.8239692,37.4665625 26.8210462,37.4665625 L25.5856615,37.4665625 C24.6075077,37.4665625 23.7748923,38.1753125 23.6225846,39.1405625 L23.5227385,39.6805625 L21.9675077,49.5220625 L21.8862769,49.9405625 C21.7322769,50.9024375 20.9013538,51.6111875 19.9232,51.6111875 L11.6630462,51.6111875 C10.9319692,51.6111875 10.3735077,50.9598125 10.4868923,50.2375625 L11.1620698,45.9634625 L1.36196923,45.9634625 Z"/>\n                    <path fill="#019CDE" d="M39.0039692,13.6255625 C38.9565846,13.927625 38.9024308,14.2364375 38.8415077,14.5536875 C36.7481231,25.271 29.5862769,28.973375 20.4393538,28.973375 L15.7821231,28.973375 C14.6635077,28.973375 13.7208923,29.783375 13.5465846,30.883625 L11.1621231,45.963125 L10.4868923,50.2375625 C10.3735077,50.9598125 10.9319692,51.6111875 11.6630462,51.6111875 L19.9232,51.6111875 C20.9013538,51.6111875 21.7322769,50.9024375 21.8862769,49.9405625 L21.9675077,49.5220625 L23.5227385,39.6805625 L23.6225846,39.1405625 C23.7748923,38.1753125 24.6075077,37.4665625 25.5856615,37.4665625 L26.8210462,37.4665625 C34.8239692,37.4665625 41.0888923,34.2265625 42.9199692,24.8508125 C43.6848923,20.934125 43.2888923,17.66375 41.2648923,15.3636875 C40.6522769,14.670125 39.8924308,14.0946875 39.0039692,13.6255625"/>\n                    <path fill="#012269" d="M36.8142923,12.7546437 C36.4944462,12.6618312 36.1644462,12.5774562 35.8259846,12.5015187 C35.4858308,12.4272687 35.1372154,12.3614562 34.7784462,12.3040812 C33.5227538,12.1015812 32.1469077,12.0053937 30.6729077,12.0053937 L18.2310615,12.0053937 C17.9247538,12.0053937 17.6336769,12.0745812 17.3730615,12.1994562 C16.7993692,12.4745187 16.3729077,13.0162062 16.2696769,13.6793937 L13.6229077,30.3957687 L13.5467538,30.8834562 C13.7210615,29.7832062 14.6636769,28.9732062 15.7822923,28.9732062 L20.4395231,28.9732062 C29.5864462,28.9732062 36.7482923,25.2691437 38.8416769,14.5535187 C38.9042923,14.2362687 38.9567538,13.9274562 39.0041385,13.6253937 C38.4744462,13.3452687 37.9007538,13.1056437 37.2830615,12.9014562 C37.1307538,12.8508312 36.9733692,12.8018937 36.8142923,12.7546437"/>\n                </g>\n            </svg>\n        </template>\n    </sw-settings-item>\n{% endblock %}\n'},"4m17":function(e,a){e.exports='{% block swag_paypal_paymemnt_action_void %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.void`)"\n              @modal-close="closeModal">\n\n        {% block swag_paypal_paymemnt_action_void_headline %}\n            <p>{{ $tc(\'swag-paypal-payment.voidAction.confirm.message\') }}</p>\n        {% endblock %}\n\n        <template #modal-footer>\n\n            {% block swag_paypal_paymemnt_action_void_cancel_button %}\n                <sw-button @click="closeModal">\n                    {{ $tc(\'swag-paypal-payment.voidAction.confirm.button.cancel\') }}\n                </sw-button>\n            {% endblock %}\n\n            {% block swag_paypal_paymemnt_action_void_confirm_button %}\n                <sw-button variant="primary"\n                           @click="voidPayment">\n                    {{ $tc(\'swag-paypal-payment.voidAction.confirm.button.confirm\') }}\n                </sw-button>\n            {% endblock %}\n\n        </template>\n\n        <sw-loader v-if="isLoading"\n                   size="43px">\n        </sw-loader>\n    </sw-modal>\n{% endblock %}\n'},"5Ejy":function(e,a){e.exports='{% block swag_paypal_pos_wizard_sync_library %}\n    <div class="swag-paypal-pos-wizard-sync-library">\n\n        {% block swag_paypal_pos_wizard_sync_library_header %}\n            <i18n class="swag-paypal-pos-wizard-sync-library__headline"\n                  path="swag-paypal-pos.wizard.syncLibrary.header"\n                  tag="div">\n                <span place="shopwareProducts">{{ $tc(\'swag-paypal-pos.wizard.syncLibrary.shopwareProducts\', shopwareProductsCount) }}</span>\n                <span place="iZettleProducts">{{ $tc(\'swag-paypal-pos.wizard.syncLibrary.iZettleProducts\', iZettleProductsCount) }}</span>\n            </i18n>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_sync_library_description_input %}\n            <swag-paypal-pos-boolean-radio\n                v-model="salesChannel.extensions.paypalPosSalesChannel.replace"\n                :label="$tc(\'swag-paypal-pos.wizard.syncLibrary.description\')"\n                :optionTrue="optionReplace"\n                :optionFalse="optionAdd">\n            </swag-paypal-pos-boolean-radio>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_sync_library_disclaimer %}\n            <div class="swag-paypal-pos-wizard-sync-library__disclaimer">\n                {{ $tc(\'swag-paypal-pos.wizard.syncLibrary.disclaimer\') }}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"5hZb":function(e,a,n){},"5ya8":function(e,a,n){},"5z16":function(e,a){e.exports='{% block swag_paypal_pos_wizard_connection_disconnect %}\n    <div class="swag-paypal-pos-wizard-connection-disconnect">\n\n        {% block swag_paypal_pos_wizard_connection_disconnect_headline_content %}\n            <div class="swag-paypal-pos-wizard-connection-disconnect__content">\n\n                {% block swag_paypal_pos_wizard_connection_disconnect_icon %}\n                    <div class="swag-paypal-pos-wizard-connection-disconnect__icon-wrapper">\n                        <sw-icon class="swag-paypal-pos-wizard-connection-disconnect__icon"\n                                 name="default-badge-warning"\n                                 size="80px"\n                                 color="#de294c">\n                        </sw-icon>\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_disconnect_headline %}\n                    <div class="swag-paypal-pos-wizard-connection-disconnect__headline">\n                        {{ $tc(\'swag-paypal-pos.wizard.connectionDisconnect.headline\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_disconnect_info %}\n                    <div class="swag-paypal-pos-wizard-connection-disconnect__info">\n                        {{ $tc(\'swag-paypal-pos.wizard.connectionDisconnect.info\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_disconnect_user %}\n                    <sw-card class="swag-paypal-pos-wizard-connection-disconnect__user"\n                             :isLoading="isFetchingInformation">\n                        <sw-container class="swag-paypal-pos-wizard-connection-disconnect__user-container"\n                                      columns="30px auto 150px"\n                                      align="center"\n                                      gap="30px">\n\n                            {% block swag_paypal_pos_wizard_connection_disconnect_user_avatar %}\n                                <sw-avatar\n                                    class="swag-paypal-pos-wizard-connection-disconnect__user-avatar"\n                                    size="40px"\n                                    :firstName="iZettleUser.firstName"\n                                    :lastName="iZettleUser.lastName">\n                                </sw-avatar>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_wizard_connection_disconnect_user_information %}\n                                <div class="swag-paypal-pos-wizard-connection-disconnect__user-info">\n\n                                    {% block swag_paypal_pos_wizard_connection_disconnect_user_information_real %}\n                                        <div class="swag-paypal-pos-wizard-connection-disconnect__user-info-name">\n                                            {{ iZettleUser.fullName }}\n                                        </div>\n                                        <div class="swag-paypal-pos-wizard-connection-disconnect__user-info-mail">\n                                            {{ iZettleUser.mail }}\n                                        </div>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"6/AX":function(e,a,n){var t=n("YBJ2");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("368c1702",t,!0,{})},"7QVQ":function(e,a,n){},"7f4H":function(e,a){e.exports='{% block swag_paypal %}\n    <sw-page class="swag-paypal">\n\n        {% block swag_paypal_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'sw-settings.index.title\') }}\n                    <sw-icon name="small-arrow-medium-right" small></sw-icon>\n                    {{ $tc(\'swag-paypal.header\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_actions %}\n            <template #smart-bar-actions>\n\n                {% block swag_paypal_actions_test %}\n                    {# @deprecated tag:v2.0.0 will be removed without replacement #}\n                {% endblock %}\n\n                {% block swag_paypal_actions_save %}\n                    <sw-button-process v-model="isSaveSuccessful"\n                                       class="sw-settings-login-registration__save-action"\n                                       variant="primary"\n                                       :isLoading="isLoading"\n                                       :disabled="isLoading || savingDisabled"\n                                       @click="onSave">\n                        {{ $tc(\'swag-paypal.settingForm.save\') }}\n                    </sw-button-process>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_content %}\n            <template #content>\n\n                {% block swag_paypal_content_card %}\n                    <sw-card-view>\n\n                        {% block swag_paypal_content_card_channel_config %}\n                            <sw-sales-channel-config v-model="config"\n                                                     ref="configComponent"\n                                                     domain="SwagPayPal.settings"\n                                                     @input.once="onInitialInput">\n\n                                {% block swag_paypal_content_card_channel_config_sales_channel %}\n                                    <template #select="{ onInput, selectedSalesChannelId }">\n\n                                        {% block swag_paypal_content_card_channel_config_sales_channel_card %}\n                                            <sw-card :title="$tc(\'global.entities.sales_channel\', 2)">\n\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_title %}\n                                                    <sw-single-select v-model="selectedSalesChannelId"\n                                                                      labelProperty="translated.name"\n                                                                      valueProperty="id"\n                                                                      :isLoading="isLoading"\n                                                                      :options="salesChannels"\n                                                                      @change="onInput">\n                                                    </sw-single-select>\n                                                {% endblock %}\n\n                                                {% block swag_paypal_content_card_channel_config_sales_channel_card_footer %}\n                                                    <template #footer>\n\n                                                        {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container %}\n                                                        <sw-container columns="2fr 1fr"\n                                                                      gap="0px 30px">\n\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_text %}\n                                                                <p>{{ $tc(\'swag-paypal.saleschannelCard.button.description\') }}</p>\n                                                            {% endblock %}\n\n                                                            {% block swag_paypal_content_card_channel_config_sales_channel_card_footer_container_button %}\n                                                                <sw-button-process v-model="isSetDefaultPaymentSuccessful"\n                                                                                   :isLoading="isSettingDefaultPaymentMethods"\n                                                                                   @click="onSetPaymentMethodDefault">\n                                                                    {{ $tc(\'swag-paypal.saleschannelCard.button.label\') }}\n                                                                </sw-button-process>\n                                                            {% endblock %}\n                                                        </sw-container>\n                                                        {% endblock %}\n                                                    </template>\n                                                {% endblock %}\n                                            </sw-card>\n                                        {% endblock %}\n                                    </template>\n                                {% endblock %}\n\n                                {% block swag_paypal_content_card_channel_config_cards %}\n                                    <template #content="{ actualConfigData, allConfigs, selectedSalesChannelId }">\n                                        <div v-if="actualConfigData">\n\n                                            {% block swag_paypal_content_card_channel_config_credentials_card %}\n                                                <sw-paypal-credentials :actualConfigData="actualConfigData"\n                                                                       :allConfigs="allConfigs"\n                                                                       :selectedSalesChannelId="selectedSalesChannelId"\n                                                                       :clientIdErrorState="clientIdErrorState"\n                                                                       :clientSecretErrorState="clientSecretErrorState"\n                                                                       :clientIdSandboxErrorState="clientIdSandboxErrorState"\n                                                                       :clientSecretSandboxErrorState="clientSecretSandboxErrorState"\n                                                                       :clientIdFilled="clientIdFilled"\n                                                                       :clientSecretFilled="clientSecretFilled"\n                                                                       :clientIdSandboxFilled="clientIdSandboxFilled"\n                                                                       :clientSecretSandboxFilled="clientSecretSandboxFilled"\n                                                                       :isLoading="isLoading">\n                                                </sw-paypal-credentials>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_behaviour %}\n                                                <sw-paypal-behaviour :actualConfigData="actualConfigData"\n                                                                     :allConfigs="allConfigs"\n                                                                     :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-behaviour>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_express %}\n                                                <sw-paypal-express :actualConfigData="actualConfigData"\n                                                                   :allConfigs="allConfigs"\n                                                                   :selectedSalesChannelId="selectedSalesChannelId"\n                                                                   @preventSave="preventSave">\n                                                </sw-paypal-express>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_installment %}\n                                                <sw-paypal-installment :actualConfigData="actualConfigData"\n                                                                       :allConfigs="allConfigs"\n                                                                       :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-installment>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_spb %}\n                                                <sw-paypal-spb v-if="showSPBCard"\n                                                               :actualConfigData="actualConfigData"\n                                                               :allConfigs="allConfigs"\n                                                               :selectedSalesChannelId="selectedSalesChannelId"\n                                                               @preventSave="preventSave">\n                                                </sw-paypal-spb>\n                                            {% endblock %}\n\n                                            {% block swag_paypal_content_card_channel_config_plus %}\n                                                <sw-paypal-plus v-if="showPlusCard"\n                                                                :actualConfigData="actualConfigData"\n                                                                :allConfigs="allConfigs"\n                                                                :selectedSalesChannelId="selectedSalesChannelId">\n                                                </sw-paypal-plus>\n                                            {% endblock %}\n                                        </div>\n                                    </template>\n                                {% endblock %}\n                            </sw-sales-channel-config>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_loading %}\n                            <sw-loader v-if="isLoading"></sw-loader>\n                        {% endblock %}\n                    </sw-card-view>\n                {% endblock %}\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n'},"8+5b":function(e,a){e.exports='{% block swag_paypal_payment_action_capture %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.capture`)"\n              @modal-close="$emit(\'modal-close\')">\n\n        {% block swag_paypal_payment_action_capture_max_amount %}\n            <sw-text-field v-model="maxCaptureValue"\n                           :label="$tc(\'swag-paypal-payment.captureAction.maxAmount\')"\n                           :disabled="true">\n            </sw-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_value %}\n            <sw-number-field v-model="captureValue"\n                             :max="maxCaptureValue"\n                             :min="0"\n                             :label="$tc(\'swag-paypal-payment.captureAction.currentAmount\')">\n                <template #suffix>\n                    {{ currency }}\n                </template>\n            </sw-number-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_is_final_capture %}\n            <sw-checkbox-field v-model="isFinalCapture"\n                               :label="$tc(\'swag-paypal-payment.captureAction.isFinal\')">\n            </sw-checkbox-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_hint %}\n            <sw-alert v-if="showHint">\n                {{ $tc(\'swag-paypal-payment.captureAction.isFinalHint\') }}\n            </sw-alert>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_capture_submit_button %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="capture">\n                    {{ $tc(\'swag-paypal-payment.captureAction.button.text\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},"8/Op":function(e,a,n){},"8ZD6":function(e,a,n){},"9MLB":function(e,a){e.exports='{% block swag_paypal_content_card_channel_config_spb %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.spb.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_spb_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-spb-fields">\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbCheckoutEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbCheckoutEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbCheckoutEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbCheckoutEnabled.label\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_alternaitve_payment_methods_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbAlternativePaymentMethodsEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.spbAlternativePaymentMethodsEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.spb.spbAlternativePaymentMethodsEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_color %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbButtonColor\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonColor\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonColor.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.spbButtonColor"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonColorOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_button_shape %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.spbButtonShape\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonShape\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonShape.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.spbButtonShape"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonShapeOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_spb_settings_locale %}\n                    <sw-inherit-wrapper\n                            v-model="actualConfigData[\'SwagPayPal.settings.spbButtonLanguageIso\']"\n                            :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.spbButtonLanguageIso\']"\n                            :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-paypal-locale-field name="SwagPayPal.settings.spbButtonLanguageIso"\n                                                    :mapInheritance="props"\n                                                    :label="$tc(\'swag-paypal.settingForm.spb.spbButtonLanguageIso.label\')"\n                                                    :helpText="$tc(\'swag-paypal.settingForm.spb.spbButtonLanguageIso.helpText\')"\n                                                    :disabled="props.isInherited"\n                                                    :value="props.currentValue"\n                                                    @change="props.updateCurrentValue"\n                                                    @preventSave="preventSave">\n                            </sw-paypal-locale-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},"9OLG":function(e,a,n){var t=n("mRCN");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("4e97c6ef",t,!0,{})},"9gbH":function(e,a){e.exports='{% block swag_paypal_content_card_channel_config_behaviour %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.behaviour.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_behaviour_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-behaviour-field">\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_merchant_location %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.merchantLocation\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.merchantLocation\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                                        :label="$tc(\'swag-paypal.settingForm.behaviour.merchantLocation.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.merchantLocation"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="merchantLocationOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_intent %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.intent\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.intent\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                                        :label="$tc(\'swag-paypal.settingForm.behaviour.intent.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.intent"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="intentOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n\n                            {% block swag_paypal_content_card_channel_config_behaviour_settings_intent_hint %}\n                                <p class="sw-paypal-behaviour__intent-hint">\n                                    {{ $tc(\'swag-paypal.settingForm.behaviour.intent.hint\') }}\n                                </p>\n                            {% endblock %}\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_submit_cart %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.submitCart\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.submitCart\']"\n                                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.submitCart"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.behaviour.submitCart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.behaviour.submitCart.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_bran_name %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.brandName\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.brandName\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.brandName"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.behaviour.brandName.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.behaviour.brandName.tooltipText\')"\n                                           :disabled="props.isInherited"\n                                           :value="props.currentValue"\n                                           @change="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_landing_page %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.landingPage\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.landingPage\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                                        :label="$tc(\'swag-paypal.settingForm.behaviour.landingPage.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.landingPage"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="landingPageOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_send_order_number %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.sendOrderNumber\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sendOrderNumber\']"\n                                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.sendOrderNumber"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.behaviour.sendOrderNumber.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.behaviour.sendOrderNumber.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_behaviour_settings_order_number_prefix %}\n                    <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.orderNumberPrefix\']"\n                                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.orderNumberPrefix\']"\n                                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-text-field name="SwagPayPal.settings.orderNumberPrefix"\n                                           :mapInheritance="props"\n                                           :label="$tc(\'swag-paypal.settingForm.behaviour.orderNumberPrefix.label\')"\n                                           :helpText="$tc(\'swag-paypal.settingForm.behaviour.orderNumberPrefix.tooltipText\')"\n                                           :disabled="props.isInherited"\n                                           :value="props.currentValue"\n                                           @change="props.updateCurrentValue">\n                            </sw-text-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},"9lyR":function(e,a){e.exports='{% block sw_text_field %}\n    <sw-contextual-field v-on="$listeners"\n                         class="sw-field--text"\n                         :name="formFieldName"\n                         @inheritance-restore="$emit(\'inheritance-restore\', $event)"\n                         @inheritance-remove="$emit(\'inheritance-remove\', $event)">\n        <template v-if="hasPrefix" #sw-contextual-field-prefix="{ disabled, identification }">\n            <slot name="prefix" v-bind="{disabled, identification}"></slot>\n        </template>\n\n        <template #sw-field-input="{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }">\n            <input v-bind="$attrs"\n                   v-on="additionalListeners"\n                   type="text"\n                   :name="identification"\n                   :id="identification"\n                   :disabled="disabled"\n                   :value="currentValue"\n                   :placeHolder="placeholder"\n                   @input="onInput"\n                   @change="onChange"\n                   @focus="setFocusClass"\n                   @blur="removeFocusClass">\n        </template>\n\n        <template v-if="copyable || hasSuffix" #sw-contextual-field-suffix="{disabled, identification}">\n            <slot name="suffix" v-bind="{ identification }"></slot>\n            <sw-field-copyable v-if="copyable"\n                               :displayName="identification"\n                               :copyableText="currentValue"\n                               :tooltip="copyableTooltip">\n            </sw-field-copyable>\n        </template>\n    </sw-contextual-field>\n{% endblock %}\n'},A8yT:function(e,a){e.exports="{% block sw_plugin_list_grid_columns_actions_settings %}\n    <template v-if=\"item.composerName === 'swag/paypal'\">\n        <sw-context-menu-item :routerLink=\"{ name: 'swag.paypal.index' }\">\n            {{ $tc('sw-plugin.list.config') }}\n        </sw-context-menu-item>\n    </template>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n"},BHCF:function(e,a,n){var t=n("1yHx");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("66929df8",t,!0,{})},BZYb:function(e,a,n){var t=n("5hZb");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("1f33603f",t,!0,{})},CA8G:function(e,a,n){var t=n("PEFo");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("2543a169",t,!0,{})},CEzf:function(e){e.exports=JSON.parse('{"swag-paypal-frw-credentials":{"buttonGetCredentials":"Get API credentials","textIntroPayPal":"To get PayPal up and running you only need to provide your PayPal API credentials.","labelClientId":"Client ID","labelClientSecret":"Client secret","labelClientIdSandbox":"Sandbox client ID","labelClientSecretSandbox":"Sandbox client secret","labelSandbox":"Sandbox","tooltipSandbox":"Depending on activation of the sandbox, separate credentials are saved.","textSettingsHeader":"Advanced settings","messageFetchedError":"Try again or use the advanced settings to provide your credentials.","titleFetchedError":"An error occurred","textFetchedSuccessful":"Credentials have been fetched.","titleNoCredentials":"Error","messageNoCredentials":"No credentials provided.","messageTestSuccess":"Credentials are valid.","titleTestError":"An error occurred"}}')},CQfv:function(e,a){e.exports='{% block swag_paypal_content_card_channel_config_installment %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.installment.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_installment_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-installment-fields">\n\n                {% block swag_paypal_content_card_channel_config_installment_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.installmentBannerEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.installmentBannerEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.installmentBannerEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.installment.installmentBannerEnabled.label\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},"D+dM":function(e,a,n){var t=n("8ZD6");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("4de7ebd8",t,!0,{})},Dvpo:function(e,a,n){},EGIw:function(e,a){e.exports='{% block sw_first_run_wizard_paypal_credentials %}\n    <div class="sw-first-run-wizard-paypal-credentials">\n\n        {% block sw_first_run_wizard_paypal_credentials_inner %}\n            <sw-loader v-if="isLoading"></sw-loader>\n\n            {% block sw_first_run_wizard_paypal_credentials_intro %}\n                <p class="sw-first-run-wizard-paypal-credentials__headerText">\n                    {{ $tc(\'swag-paypal-frw-credentials.textIntroPayPal\') }}\n                </p>\n            {% endblock %}\n\n            {% block sw_first_run_wizard_paypal_credentials_sandbox %}\n                <sw-switch-field v-model="config[\'SwagPayPal.settings.sandbox\']"\n                                 :label="$tc(\'swag-paypal-frw-credentials.labelSandbox\')"\n                                 :helpText="$tc(\'swag-paypal-frw-credentials.tooltipSandbox\')">\n                </sw-switch-field>\n            {% endblock %}\n\n            {% block sw_first_run_wizard_paypal_credentials_button_container %}\n                <div class="sw-first-run-wizard-paypal-credentials__button-container">\n\n                    {% block sw_first_run_wizard_paypal_credentials_button %}\n                        <a class="sw-button sw-button--primary swag-paypal-frw__signup-button"\n                           target="_blank"\n                           :data-paypal-onboard-complete="onboardingCallback"\n                           :href="`${onboardingUrl}`"\n                           data-paypal-button="true">\n                            {{ $tc(\'swag-paypal-frw-credentials.buttonGetCredentials\') }}\n                        </a>\n                    {% endblock %}\n\n                    {% block sw_first_run_wizard_paypal_credentials_indicator %}\n                        <div class="sw-first-run-wizard-paypal-credentials__indicator">\n                            <template v-if="isGetCredentialsSuccessful">\n\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_icon %}\n                                    <sw-icon name="small-default-checkmark-line-medium"\n                                             class="sw-first-run-wizard-paypal-credentials__icon-successful">\n                                    </sw-icon>\n                                {% endblock %}\n\n                                {% block sw_first_run_wizard_paypal_credentials_indicator_text %}\n                                    <span class="sw-first-run-wizard-paypal-credentials__text-indicator">\n                                        {{ $tc(\'swag-paypal-frw-credentials.textFetchedSuccessful\') }}\n                                    </span>\n                                {% endblock %}\n                            </template>\n                        </div>\n                    {% endblock %}\n                </div>\n            {% endblock %}\n\n            {% block sw_first_run_wizard_paypal_credentials_collapse %}\n                <sw-collapse>\n\n                    {% block sw_first_run_wizard_paypal_credentials_collapse_header %}\n                        <template #header="{ expanded }">\n                            <div class="sw-first-run-wizard-paypal-credentials__collapse-header">\n\n                                {% block sw_first_run_wizard_paypal_credentials_collapse_header_text %}\n                                    <span class="sw-first-run-wizard-paypal-credentials__collapse-header-title">\n                                        {{ $tc(\'swag-paypal-frw-credentials.textSettingsHeader\') }}\n                                    </span>\n                                {% endblock %}\n\n                                {% block sw_first_run_wizard_paypal_credentials_collapse_header_button_expanded %}\n                                    <sw-icon v-if="expanded"\n                                             key="filter-collapse-expanded-indicator"\n                                             class="sw-first-run-wizard-paypal-credentials__collapse-button"\n                                             name="small-arrow-small-down">\n                                    </sw-icon>\n                                {% endblock %}\n\n                                {% block sw_first_run_wizard_paypal_credentials_collapse_header_button_not_expanded %}\n                                    <sw-icon v-else\n                                             key="filter-collapse-expanded-indicator"\n                                             class="sw-first-run-wizard-paypal-credentials__collapse-button"\n                                             name="small-arrow-small-right">\n                                    </sw-icon>\n                                {% endblock %}\n                            </div>\n                        </template>\n                    {% endblock %}\n\n                    {% block sw_first_run_wizard_paypal_credentials_collapse_content %}\n                        <template #content>\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientId %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientId\']"\n                                               v-show="!config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientId\')"\n                                               @change="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientSecret %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientSecret\']"\n                                               v-show="!config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientSecret\')"\n                                               @change="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientIdSandbox %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientIdSandbox\']"\n                                               v-show="config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientIdSandbox\')"\n                                               @change="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n\n                            {% block sw_first_run_wizard_paypal_credentials_collapse_content_clientSecretSandbox %}\n                                <sw-text-field v-model="config[\'SwagPayPal.settings.clientSecretSandbox\']"\n                                               v-show="config[\'SwagPayPal.settings.sandbox\']"\n                                               :label="$tc(\'swag-paypal-frw-credentials.labelClientSecretSandbox\')"\n                                               @change="onCredentialsChanged">\n                                </sw-text-field>\n                            {% endblock %}\n                        </template>\n                    {% endblock %}\n                </sw-collapse>\n            {% endblock %}\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"F/8Z":function(e,a,n){},Fnts:function(e,a,n){},"G/Pn":function(e,a){e.exports='{% block sw_sales_channel_modal_detail_header_icon %}\n    <span v-if="isPayPalPosSalesChannel(detailType.id)"\n          class="sw-sales-channel-modal-detail__header-icon">\n         <img class="swag-paypal-pos-modal-detail__icon"\n              :src="\'swagpaypal/static/img/paypal-pos-logo.svg\' | asset">\n    </span>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n\n{% block sw_sales_channel_modal_detail_header_meta %}\n    <div v-if="isPayPalPosSalesChannel(detailType.id)"\n         class="sw-sales-channel-modal-detail__header-meta">\n        <h4 class="sw-sales-channel-modal-detail__header-name">\n            {{ detailType.name }}\n        </h4>\n        <div class="sw-sales-channel-modal-detail__header-manufacturer">\n            {{ $tc(\'swag-paypal-pos.general.salesChannelDetailDescription.manufacturer\') }}\n        </div>\n    </div>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n\n{% block sw_sales_channel_modal_detail_description %}\n    <template v-if="isPayPalPosSalesChannel(detailType.id)">\n        <h4 class="sw-sales-channel-modal-detail__description-long-title">\n            {{ $tc(\'swag-paypal-pos.general.salesChannelDetailDescription.title\') }}\n        </h4>\n        <div v-if="detailType.translated.descriptionLong"\n             class="sw-sales-channel-modal-detail__description-long-text">\n            {{ detailType.descriptionLong }}\n        </div>\n        <div v-else\n             class="sw-sales-channel-modal-detail__description-long-text">\n            {{ detailType.description }}\n        </div>\n    </template>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n\n{# PPI-65 - Remove block override or replace swag-image-slider with sw-image-slider #}\n{% block sw_sales_channel_modal_detail_screenshots %}\n    <div v-if="isPayPalPosSalesChannel(detailType.id)"\n         class="sw-sales-channel-modal-detail__screenshots">\n        <swag-image-slider\n                :images="detailType.screenshotUrls"\n                :canvasWidth="580"\n                :canvasHeight="272"\n                overflow="visible">\n        </swag-image-slider>\n    </div>\n\n    <template v-else>\n        {% parent %}\n    </template>\n{% endblock %}\n'},G59K:function(e,a,n){var t=n("nEzq");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("d7b4c7c6",t,!0,{})},GiWa:function(e,a){e.exports='{% block swag_paypal_payment_actions %}\n    <div>\n        <div class="swag-paypal-payment-actions__button-container">\n            <div class="swag-paypal-payment-actions__authorize-button-group">\n\n                {% block swag_paypal_payment_actions_void %}\n                    <sw-button v-if="showVoidButton"\n                               size="small"\n                               @click="spawnModal(\'void\')">\n                        {{ $tc(\'swag-paypal-payment.buttons.label.void\') }}\n                    </sw-button>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_capture %}\n                    <sw-button v-if="captureableAmount > 0"\n                               size="small"\n                               @click="spawnModal(\'capture\')">\n                        {{ $tc(\'swag-paypal-payment.buttons.label.capture\') }}\n                    </sw-button>\n                {% endblock %}\n            </div>\n\n            {% block swag_paypal_payment_actions_refund %}\n                <sw-button variant="primary"\n                           size="small"\n                           :disabled="refundableAmount <= 0"\n                           @click="spawnModal(\'refund\')">\n                    {{ $tc(\'swag-paypal-payment.buttons.label.refund\') }}\n                </sw-button>\n            {% endblock %}\n\n        </div>\n\n        {% block swag_paypal_payment_actions_modal %}\n                {% block swag_paypal_payment_actions_modal_capture %}\n                    <swag-paypal-payment-action-capture v-if="modalType === \'capture\'"\n                                                        :orderId="orderId"\n                                                        :paymentResource="paymentResource"\n                                                        :maxCaptureValue="captureableAmount"\n                                                        @modal-close="closeModal">\n                    </swag-paypal-payment-action-capture>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_modal_refund %}\n                    <swag-paypal-payment-action-refund v-if="modalType === \'refund\'"\n                                                       :orderId="orderId"\n                                                       :paymentResource="paymentResource"\n                                                       @modal-close="closeModal">\n                    </swag-paypal-payment-action-refund>\n                {% endblock %}\n\n                {% block swag_paypal_payment_actions_modal_void %}\n                    <swag-paypal-payment-action-void v-if="modalType === \'void\'"\n                                                     :orderId="orderId"\n                                                     :paymentResource="paymentResource"\n                                                     @modal-close="closeModal">\n                    </swag-paypal-payment-action-void>\n                {% endblock %}\n        {% endblock %}\n    </div>\n{% endblock %}\n'},HgMU:function(e,a,n){},JSL7:function(e){e.exports=JSON.parse('{"swag-paypal-payment":{"general":{"title":"Bestellungen"},"tabs":{"overview":"Übersicht"},"paymentDetails":{"cardTitle":"Zahlung","invoice":{"heading":"Rechnungsbetrag","totalAmount":"Gesamtbetrag:","subTotal":"Zwischensumme:","shipping":"Versandkosten:"},"payment":{"heading":"Zahlungsdetails","intent":"Zahlungsabschluss:","paymentId":"Zahlungs-ID:","cartId":"Warenkorb-ID:","state":"Status:","createTime":"Erstellt:","updateTime":"Zul. aktualisiert:"},"customer":{"heading":"Kunde","payerId":"Kunden-ID:"},"error":{"title":"Fehler beim Abrufen der Zahlungsdaten von PayPal"}},"transactionHistory":{"cardTitle":"Zahlungsverlauf","states":{"authorization":"Autorisierung","sale":"Verkauf","refund":"Rückerstattung","capture":"Einzug","order":"Bestellung"},"types":{"type":"Typ","amount":"Betrag","createTime":"Erstellt","updateTime":"Aktualisiert","state":"Status","trackingId":"Tracking-ID","transactionFee":"Aufschlag","paymentMode":"Zahlungsmodus"}},"buttons":{"label":{"refund":"Rückerstattung","capture":"Einziehen","void":"Autorisierung abbrechen"}},"modal":{"title":{"refund":"Rückerstattung","capture":"Zahlung einziehen","void":"Autorisierung abbrechen"}},"refundAction":{"successMessage":"Die Rückerstattung war erfolgreich.","invoiceSelect":{"label":"Einzug wählen"},"refundAmount":{"label":"Betrag","helpText":"Ein Betrag von \'0\' sorgt für die Erstattung der kompletten Zahlung."},"refundDescription":{"label":"Beschreibung","placeholder":"Beschreibung eintragen"},"refundReason":{"label":"Begründung","placeholder":"Begründung eintragen"},"refundInvoiceNumber":{"label":"Rechnungsnummer","placeholder":"Rechnungsnummer eintragen"},"confirmButton":{"text":"Ausführen"}},"captureAction":{"successMessage":"Die Autorisierung war erfolgreich.","maxAmount":"Maximalbetrag","currentAmount":"Betrag","isFinal":"Kein erneuter Einzug möglich","isFinalHint":"Hinweis: Als letzter Einzug markiert, obwohl nicht der ganze Betrag eingezogen werden soll.","button":{"text":"Zahlung einziehen"}},"voidAction":{"successMessage":"Die Autorisierung wurde erfolgreich abgebrochen.","confirm":{"message":"Möchtest du diese Zahlung wirklich abbrechen?","button":{"confirm":"Autorisierung abbrechen","cancel":"Nein"}}},"errorPage":{"title":"Zahlungsdetails nicht länger verfügbar","canceledPaymentContent":"Beim Abrufen der Zahlungsdaten von PayPal ist ein Fehler aufgetreten (INVALID_RESOURCE_ID). Wenn du diese Nachricht siehst, handelt es sich vermutlich um eine Zahlung, die vom Kunden abgebrochen wurde. Abgebrochene Zahlungen werden nach einiger Zeit von PayPal gelöscht und sind dann nicht länger abrufbar.","sandboxLiveContent":"Beim Abrufen der Zahlungsdaten von PayPal ist ein Fehler aufgetreten (INVALID_RESOURCE_ID). Wenn du diese Nachricht siehst, handelt es sich vermutlich um eine Zahlung, die mit aktivierter Sandbox angelegt wurde und nun mit Live-Daten abgerufen wurde, oder umgekehrt. Korrigiere deine PayPal-Einstellungen oder lösche Test-Bestellungen aus dem System."}}}')},Jc0m:function(e,a){e.exports='{% block swag_paypal_pos_detail_overview %}\n    <div class="sw-sales-channel-detail-overview">\n\n        {% block swag_paypal_pos_detail_overview_status %}\n            <swag-paypal-pos-status-view\n                    v-if="salesChannel.active"\n                    :isLoading="isLoading"\n                    :isSyncing="isSyncing"\n                    :lastCompleteRun="lastCompleteRun"\n                    :lastFinishedRun="lastRun"\n                    :salesChannel="salesChannel"\n                    :syncErrors="syncErrors">\n\n                {% block swag_paypal_pos_detail_overview_status_actions %}\n                    <template #actions>\n                        <sw-button-group v-if="salesChannel && salesChannel.active && !isSyncing">\n\n                            {% block swag_paypal_pos_detail_overview_status_actions_sync_button %}\n                                <sw-button class="swag-paypal-pos-detail-overview__sync-button"\n                                           variant="primary"\n                                           @click="onStartSync">\n                                    {{ $tc(\'swag-paypal-pos.detail.overview.buttonSync\') }}\n                                </sw-button>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu %}\n                                <sw-context-button>\n\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_button %}\n                                        <template #button>\n                                            <sw-button class="swag-paypal-pos-detail-overview__sync-button-context"\n                                                       variant="primary"\n                                                       square\n                                                       :disabled="isSyncing">\n                                                <sw-icon name="small-arrow-medium-down" size="16"></sw-icon>\n                                            </sw-button>\n                                        </template>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_products %}\n                                        <sw-context-menu-item @click="onStartProductSync">\n                                            {{ $tc(\'swag-paypal-pos.detail.overview.buttonSyncProducts\') }}\n                                        </sw-context-menu-item>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_image %}\n                                        <sw-context-menu-item @click="onStartImageSync">\n                                            {{ $tc(\'swag-paypal-pos.detail.overview.buttonSyncImages\') }}\n                                        </sw-context-menu-item>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_pos_detail_overview_status_actions_sync_context_menu_item_inventory %}\n                                        <sw-context-menu-item @click="onStartInventorySync">\n                                            {{ $tc(\'swag-paypal-pos.detail.overview.buttonSyncInventory\') }}\n                                        </sw-context-menu-item>\n                                    {% endblock %}\n                                </sw-context-button>\n                            {% endblock %}\n                        </sw-button-group>\n\n                        {% block swag_paypal_pos_detail_overview_status_actions_sync_abort_button %}\n                            <sw-button v-if="isSyncing"\n                                       @click="onSyncAbort">\n                                {{ $tc(\'swag-paypal-pos.detail.overview.buttonSyncAbort\') }}\n                            </sw-button>\n                        {% endblock %}\n                    </template>\n                {% endblock %}\n            </swag-paypal-pos-status-view>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_overview_setup %}\n            <swag-paypal-pos-continue-setup v-else>\n            </swag-paypal-pos-continue-setup>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_overview_getting_started %}\n            <swag-paypal-pos-getting-started>\n            </swag-paypal-pos-getting-started>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},JlGH:function(e,a){e.exports='{% block swag_paypal_content_card_channel_config_credentials %}\n    <sw-card class="sw-card--grid"\n             :title="$tc(\'swag-paypal.settingForm.credentials.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_credentials_card_container %}\n            <sw-container>\n\n                {% block swag_paypal_content_card_channel_config_credentials_card_container_settings %}\n                    <div v-if="actualConfigData" class="swag-paypal-settings-credentials-fields">\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientId\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientId\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientId"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientId.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientId.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientIdErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientSecret\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientSecret\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientSecret"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientSecret.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientSecret.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientSecretErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_get_credentials %}\n                            <a class="sw-button"\n                               target="_blank"\n                               :href="`${onboardingUrlLive}`"\n                               data-paypal-onboard-complete="onboardingCallbackLive"\n                               data-paypal-button="true">\n                                {{ $tc(\'swag-paypal.settingForm.credentials.button.title\') }}\n                            </a>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test %}\n                            <sw-button-process v-model="isTestLiveSuccessful"\n                                               :isLoading="isTestingLive"\n                                               :disabled="testLiveButtonDisabled"\n                                               @click="onTest(false)">\n                                {{ $tc(\'swag-paypal.settingForm.testLive\') }}\n                            </sw-button-process>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_sandbox %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.sandbox\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.sandbox\']"\n                                                :customInheritationCheckFunction="checkBoolFieldInheritance">\n                                <template #content="props">\n                                    <sw-switch-field name="SwagPayPal.settings.sandbox"\n                                                     :mapInheritance="props"\n                                                     :label="$tc(\'swag-paypal.settingForm.credentials.sandbox.label\')"\n                                                     :helpText="$tc(\'swag-paypal.settingForm.credentials.sandbox.tooltipText\')"\n                                                     :disabled="props.isInherited"\n                                                     :value="props.currentValue"\n                                                     @change="props.updateCurrentValue">\n                                    </sw-switch-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_id_sandbox %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientIdSandbox\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientIdSandbox\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientIdSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientIdSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientIdSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientIdSandboxErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_client_secret_sandbox %}\n                            <sw-inherit-wrapper v-model="actualConfigData[\'SwagPayPal.settings.clientSecretSandbox\']"\n                                                :inheritedValue="selectedSalesChannelId === null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.clientSecretSandbox\']"\n                                                :customInheritationCheckFunction="checkTextFieldInheritance">\n                                <template #content="props">\n                                    <sw-text-field name="SwagPayPal.settings.clientSecretSandbox"\n                                                   :mapInheritance="props"\n                                                   :label="$tc(\'swag-paypal.settingForm.credentials.clientSecretSandbox.label\')"\n                                                   :helpText="$tc(\'swag-paypal.settingForm.credentials.clientSecretSandbox.tooltipText\')"\n                                                   :disabled="props.isInherited"\n                                                   :value="props.currentValue"\n                                                   :error="clientSecretSandboxErrorState"\n                                                   @change="props.updateCurrentValue">\n                                    </sw-text-field>\n                                </template>\n                            </sw-inherit-wrapper>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_get_credentials_sandbox %}\n                            <a class="sw-button"\n                               target="_blank"\n                               :href="`${onboardingUrlSandbox}`"\n                               data-paypal-onboard-complete="onboardingCallbackSandbox"\n                               data-paypal-button="true">\n                                {{ $tc(\'swag-paypal.settingForm.credentials.button.titleSandbox\') }}\n                            </a>\n                        {% endblock %}\n\n                        {% block swag_paypal_content_card_channel_config_credentials_card_container_settings_actions_test_sandbox %}\n                            <sw-button-process v-model="isTestSandboxSuccessful"\n                                               :isLoading="isTestingSandbox"\n                                               :disabled="testSandboxButtonDisabled"\n                                               @click="onTest(true)">\n                                {{ $tc(\'swag-paypal.settingForm.testSandbox\') }}\n                            </sw-button-process>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},L6Rc:function(e,a,n){var t=n("0dqU");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("ee585372",t,!0,{})},Lgxv:function(e,a){const{Mixin:n}=Shopware;n.register("swag-paypal-pos-log-label",{methods:{getLabelVariant:e=>e>=400?"danger":e>=300?"warning":e>200?"info":"success",getLabel:e=>e>=300?"swag-paypal-pos.detail.logs.states.failed":"swag-paypal-pos.detail.logs.states.success"}})},Mge0:function(e,a){e.exports='{% block swag_paypal_payment_detail %}\n    <div class="swag-paypal-payment-detail">\n        <div v-if="!isLoading && showPaymentDetails">\n            <sw-card :title="$tc(\'swag-paypal-payment.paymentDetails.cardTitle\')">\n                <template #grid>\n\n                    {% block swag_paypal_payment_actions_section %}\n                        <sw-card-section secondary\n                                         slim>\n                            <swag-paypal-payment-actions :orderId="order.id" :paymentResource="paymentResource">\n                            </swag-paypal-payment-actions>\n                        </sw-card-section>\n                    {% endblock %}\n\n                    <sw-card-section divider="top">\n                        <sw-container columns="1fr"\n                                      gap="0px 30px">\n\n                            {% block swag_paypal_payment_detail_invoice %}\n                                {% block swag_paypal_payment_detail_invoice_heading %}\n                                    <h3>\n                                        {{ $tc(\'swag-paypal-payment.paymentDetails.invoice.heading\') }}\n                                    </h3>\n                                {% endblock %}\n\n                                {% block swag_paypal_payment_detail_invoice_list %}\n                                    <sw-description-list class="swag-paypal-payment-detail__data">\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.totalAmount\') }}</dt>\n                                        <dd>{{ amount.total }} {{ currency }}</dd>\n\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.subTotal\') }}</dt>\n                                        <dd> {{ amount.details.subtotal }} {{ currency }}</dd>\n\n                                        <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.invoice.shipping\') }}</dt>\n                                        <dd> {{ amount.details.shipping }} {{ currency }}</dd>\n                                    </sw-description-list>\n                                {% endblock %}\n\n                                {% block swag_paypal_payment_detail_payment %}\n                                    {% block swag_paypal_payment_detail_payment_heading %}\n                                        <h3 class="swag-paypal-payment-detail__heading">\n                                            {{ $tc(\'swag-paypal-payment.paymentDetails.payment.heading\') }}\n                                        </h3>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_payment_detail_payment_list %}\n                                        <sw-description-list class="swag-paypal-payment-detail__data">\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.intent\') }}</dt>\n                                            <dd>{{ $tc(`swag-paypal.settingForm.behaviour.intent.${paymentResource.intent}`) }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.paymentId\') }}</dt>\n                                            <dd>{{ paymentResource.id }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.cartId\') }}</dt>\n                                            <dd>{{ paymentResource.cart }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.state\') }}</dt>\n                                            <dd>{{ paymentResource.state }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.createTime\') }}</dt>\n                                            <dd>{{ createDateTime }}</dd>\n\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.payment.updateTime\') }}</dt>\n                                            <dd>{{ updateDateTime }}</dd>\n                                        </sw-description-list>\n                                    {% endblock %}\n                                {% endblock %}\n\n                                {% block swag_paypal_payment_detail_customer %}\n                                    {% block swag_paypal_payment_detail_customer_heading %}\n                                        <h3 class="swag-paypal-payment-detail__heading">\n                                            {{ $tc(\'swag-paypal-payment.paymentDetails.customer.heading\') }}\n                                        </h3>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_payment_detail_customer_list %}\n                                        <sw-description-list class="swag-paypal-payment-detail__data">\n                                            <dt>{{ $tc(\'swag-paypal-payment.paymentDetails.customer.payerId\') }}</dt>\n                                            <dd>{{ payerId }}</dd>\n                                        </sw-description-list>\n                                    {% endblock %}\n                                {% endblock %}\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card-section>\n                </template>\n            </sw-card>\n\n            {% block swag_paypal_payment_transaction_history_card %}\n                <sw-card :title="$tc(\'swag-paypal-payment.transactionHistory.cardTitle\')">\n                    <template #grid>\n\n                        {% block swag_paypal_payment_transaction_history_grid %}\n                            <sw-data-grid :dataSource="relatedResources"\n                                          :columns="relatedResourceColumns"\n                                          :showActions="false"\n                                          :showSelection="false">\n                            </sw-data-grid>\n                        {% endblock %}\n                    </template>\n                </sw-card>\n            {% endblock %}\n        </div>\n\n        {% block swag_paypal_payment_detail_error_page %}\n            {% block swag_paypal_payment_detail_error_page_canceled %}\n                <div v-if="showCanceledPaymentError">\n                    <sw-empty-state\n                        :title="$tc(\'swag-paypal-payment.errorPage.title\')"\n                        :subline="$tc(\'swag-paypal-payment.errorPage.canceledPaymentContent\')"\n                        icon="default-shopping-paper-bag"\n                        color="#A092F0">\n                    </sw-empty-state>\n                </div>\n            {% endblock %}\n\n            {% block swag_paypal_payment_detail_error_page_other %}\n                <div v-if="showSandboxLiveError">\n                    <sw-empty-state\n                        :title="$tc(\'swag-paypal-payment.errorPage.title\')"\n                        :subline="$tc(\'swag-paypal-payment.errorPage.sandboxLiveContent\')"\n                        icon="default-shopping-paper-bag"\n                        color="#A092F0">\n                    </sw-empty-state>\n                </div>\n            {% endblock %}\n        {% endblock %}\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </div>\n{% endblock %}\n'},"O/Fb":function(e,a){e.exports='{% block sw_first_run_wizard_modal %}\n    <div class="swag-paypal-pos-wizard">\n        <sw-modal v-if="showModal"\n                  class="swag-paypal-pos-wizard-modal"\n                  :title="title"\n                  :variant="variant"\n                  @modal-close="onCloseModal">\n\n            {% block swag_paypal_pos_wizard_modal_content %}\n                <div class="swag-paypal-pos-wizard__modal-content">\n                    <sw-container class="swag-paypal-pos-wizard__columns"\n                                  :class="{ \'swag-paypal-pos-wizard__columns--two\': showSteps }">\n\n                        {% block swag_paypal_pos_wizard_modal_content_steps %}\n                            <div v-if="showSteps"\n                                 class="swag-paypal-pos-wizard__steps">\n                                <sw-step-display :initialItemVariants="stepInitialItemVariants"\n                                                 :itemIndex="stepIndex"\n                                                 :itemVariant="stepVariant">\n                                    <sw-step-item v-for="pageName in displayStepperPages" :key="pageName">\n                                        {{ $tc(`swag-paypal-pos.wizard.stepItemTitle.${pageName}`) }}\n                                    </sw-step-item>\n                                </sw-step-display>\n                            </div>\n                        {% endblock %}\n\n                        {% block swag_paypal_pos_wizard_modal_content_page %}\n                            <div class="swag-paypal-pos-wizard__page">\n                                <router-view :salesChannel="salesChannel"\n                                             :cloneSalesChannelId="cloneSalesChannelId"\n                                             :saveSalesChannel="save"\n                                             :isLoading="isLoading"\n                                             @buttons-update="updateButtons"\n                                             @frw-set-title="setTitle"\n                                             @frw-finish="onFinishWizard"\n                                             @toggle-loading="toggleLoading"\n                                             @recreate-sales-channel="createNewSalesChannel"\n                                             @update-clone-sales-channel="updateCloneSalesChannel">\n                                </router-view>\n                            </div>\n                        {% endblock %}\n                    </sw-container>\n                </div>\n            {% endblock %}\n\n            {% block swag_paypal_pos_wizard_modal_footer %}\n                <template #modal-footer>\n                    <div class="swag-paypal-pos-wizard__footer">\n\n                        {% block swag_paypal_pos_wizard_modal_footer_left %}\n                            <div class="footer-left">\n                                <sw-button v-for="button in buttons.left"\n                                           size="small"\n                                           :key="button.key"\n                                           :disabled="button.disabled"\n                                           :isLoading="isLoading"\n                                           :variant="button.variant"\n                                           @click="onButtonClick(button.action)">\n                                    {{ button.label }}\n                                </sw-button>\n                            </div>\n                        {% endblock %}\n\n                        {% block swag_paypal_pos_wizard_modal_footer_right %}\n                            <div class="footer-right">\n                                <sw-button v-for="button in buttons.right"\n                                           size="small"\n                                           :key="button.key"\n                                           :disabled="button.disabled"\n                                           :isLoading="isLoading"\n                                           :variant="button.variant"\n                                           @click="onButtonClick(button.action)">\n                                    {{ button.label }}\n                                </sw-button>\n                            </div>\n                        {% endblock %}\n                    </div>\n                </template>\n            {% endblock %}\n        </sw-modal>\n    </div>\n{% endblock %}\n\n'},OJHy:function(e){e.exports=JSON.parse('{"swag-paypal":{"header":"PayPal","saleschannelCard":{"button":{"description":"Klicken, um PayPal im ausgewählten Saleschannel zu aktivieren und als Standardzahlungsart zu setzen","label":"Setze PayPal als Standard"}},"general":{"mainMenuItemGeneral":"PayPal","descriptionTextModule":"Einstellungen für PayPal"},"messageNotBlank":"Dieser Wert darf nicht leer sein.","settingForm":{"save":"Speichern","testLive":"API-Zugangsdaten testen","testSandbox":"Sandbox-API-Zugangsdaten testen","credentials":{"cardTitle":"API-Zugangsdaten","clientId":{"label":"Client-ID","tooltipText":"Die Client-ID der REST-API, die das Plugin dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientSecret":{"label":"Client-Secret","tooltipText":"Das Client-Secret der REST-API, das das Plugin dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientIdSandbox":{"label":"Sandbox-Client-ID","tooltipText":"Die Client-ID der REST-API, die das Plugin im Testfall dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"clientSecretSandbox":{"label":"Sandbox-Client-Secret","tooltipText":"Das Client-Secret der REST-API, das das Plugin im Testfall dazu verwendet, sich mit der PayPal-API zu authentifizieren."},"sandbox":{"label":"Sandbox aktivieren","tooltipText":"Aktiviere diese Option, um die Integration zu testen."},"button":{"title":"Hole API Zugangsdaten","titleSandbox":"Hole Sandbox API Zugangsdaten","messageFetchedError":" Bitte versuche es erneut oder gebe die Zugangsdaten manuell ein.","titleFetchedError":"Es ist ein Fehler aufgetreten"}},"behaviour":{"cardTitle":"Verhalten","merchantLocation":{"label":"Händlerstandort","germany":"Deutschland","other":"Anderer Händlerstandort"},"intent":{"label":"Zahlungsabschluss","hint":"Hinweis: PayPal PLUS funktioniert nur mit dem Zahlungsabschluss \\"Sale\\". Dieser wird, unabhängig von der gewählten Option, automatisch gesetzt.","sale":"Zahlung sofort abschließen (Sale)","authorize":"Zeitverzögerter Zahlungseinzug (Auth-Capture)","order":"Zeitverzögerter Zahlungseinzug (Order-Auth-Capture)"},"submitCart":{"label":"Warenkorb übertragen","helpText":"Wenn diese Option aktiv ist, werden beim Checkout die Warenkorbdaten an PayPal übertragen."},"brandName":{"label":"Eigener Markenname auf der PayPal-Seite","tooltipText":"Dieser Text wird als Markenname auf der PayPal-Zahlungsseite angezeigt."},"landingPage":{"label":"PayPal-Landingpage","helpText":{"Login":"Anmeldung: Auf der PayPal-Seite wird der Login als Landingpage angezeigt.","Billing":"Registrierung: Auf der PayPal-Seite wird die Registrierung als Landingpage angezeigt."},"options":{"Login":"Anmeldung","Billing":"Registrierung"}},"sendOrderNumber":{"label":"Bestellnummer übertragen","helpText":"Wenn diese Option aktiv ist, wird beim Checkout die Bestellnummer an PayPal übertragen."},"orderNumberPrefix":{"label":"Bestellnummer-Präfix","tooltipText":"Dieser Text wird vor die ursprüngliche Bestellnummer gehängt (z.B. MeinShop_SW20001). Das hilft dabei der Identifizierung des Shops, in dem die Zahlung ausgeführt wurde."}},"express":{"cardTitle":"PayPal Express Checkout","ecsDetailEnabled":{"label":"\'Direkt zu PayPal\' auf Detailseite:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf jeder Produktdetailseite angezeigt."},"ecsCartEnabled":{"label":"\'Direkt zu PayPal\' im Warenkorb:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf der Warenkorbseite angezeigt."},"ecsOffCanvasEnabled":{"label":"\'Direkt zu PayPal\' im Off-Canvas Warenkorb:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button in dem Off-Canvas-Warenkorb angezeigt."},"ecsLoginEnabled":{"label":"\'Direkt zu PayPal\' auf Loginseite:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf der Login- und Registrierungsseite angezeigt."},"ecsListingEnabled":{"label":"\'Direkt zu PayPal\' auf Listing Seiten:","helpText":"Wenn diese Option aktiv ist, wird der Express Checkout Button auf Listing-Seiten angezeigt."},"ecsButtonColor":{"label":"Buttonfarbe:","options":{"blue":"Blau","black":"Schwarz","gold":"Gold","silver":"Silber"}},"ecsButtonShape":{"label":"Buttonform:","options":{"pill":"Rund","rect":"Eckig"}},"ecsSubmitCart":{"label":"Warenkorb übertragen:","helpText":"Wenn diese Option aktiv ist, wird der Warenkorb bei Express-Bestellungen an PayPal übertragen."},"ecsButtonLanguageIso":{"label":"Buttonsprache:","helpText":"Wenn nicht gesetzt, wird die Sprache des Verkaufskanals verwendet."}},"installment":{"cardTitle":"Ratenzahlung","installmentBannerEnabled":{"label":"Ratenzahlung Banner aktivieren"}},"spb":{"cardTitle":"PayPal Checkout mit Smart Payment Buttons","spbCheckoutEnabled":{"label":"Smart Payment Buttons aktivieren"},"spbButtonLanguageIso":{"label":"Buttonsprache:","helpText":"Wenn nicht gesetzt, wird die Sprache des Verkaufskanals verwendet."},"spbAlternativePaymentMethodsEnabled":{"label":"Aktiviert die alternativen Zahlungsarten der Smart Payment Buttons.","helpText":"Die alternativen Zahlungsarten sind, Kreditkarten, SEPA und mehr."}},"plus":{"cardTitle":"PayPal PLUS","introduction":"<strong>Die Komplettlösung mit PayPal, Lastschrift, Kreditkarte und Kauf auf Rechnung.</strong> PayPal PLUS bietet deinen Kunden durch die Vielzahl der Zahlarten mehr Zahlungsflexibilität. Deine Vorteile als Händler: Die vereinfachte Buchhaltung mit nur einem Vertragspartner, einem Konto und einer Transaktionsübersicht für alle Zahlungseingänge. Dein Geld erhältst du direkt nach Kaufabschluss.<br>Bitte PayPal PLUS <a href=\'https://www.paypal.com/de/webapps/mpp/paypal-plus\' target=\'_blank\'>hier</a> beantragen. Den Rechnungskauf kannst du <a href=\'https://www.paypal.com/de/webapps/mpp/pui-start\' target=\'_blank\'>hier</a> beantragen.","plusCheckoutEnabled":{"label":"PayPal PLUS aktivieren"}},"locale-field":{"infobox":{"text":"Um eine Liste der gültigen Ländercodes zu sehen, klicken Sie ","href":"hier"},"error":{"detail":"Der von Ihnen angegebene Ländercode entspricht nicht dem von PayPal geforderten Format. Ein gültiges Format ist \\"en_GB\\"."}},"titleSuccess":"Erfolg","titleError":"Fehler","messageSaveSuccess":"Die PayPal-Einstellungen wurden gespeichert.","messageTestSuccess":"Die API-Zugangsdaten wurden validiert.","messageTestError":"Die API-Zugangsdaten konnten nicht validiert werden.","messageWebhookCreated":"Der Webhook wurde registriert.","messageWebhookUpdated":"Der Webhook wurde aktualisiert.","messageWebhookError":"Der Webhook konnte nicht gespeichert werden. Folgende Fehler sind aufgetreten:"}}}')},"Oi+7":function(e,a,n){},Okln:function(e,a){e.exports='{% block swag_paypal_pos_detail_runs %}\n    <div class="swag-paypal-pos-detail-runs">\n\n        {% block swag_paypal_pos_detail_runs_card %}\n            <sw-card :title="$tc(\'swag-paypal-pos.detail.runs.title\')"\n                     :isLoading="isLoading">\n\n                {% block swag_paypal_pos_detail_runs_card_grid %}\n                    <template #grid>\n\n                        <sw-data-grid v-if="total > 0"\n                                      identifier="swag-paypal-pos-detail-runs"\n                                      :columns="columns"\n                                      :dataSource="runs"\n                                      :isLoading="isLoading || total === 0"\n                                      :showActions="true"\n                                      :showSelection="false"\n                                      :showSettings="true"\n                                      :allowColumnEdit="true"\n                                      :sortBy="sortBy"\n                                      :sortDirection="sortDirection"\n                                      :skeletonItemAmount="limit"\n                                      @column-sort="onSortColumn">\n\n                            {% block swag_paypal_pos_detail_runs_card_grid_pagination %}\n                                <template #pagination>\n                                    <sw-pagination :limit="limit"\n                                                   :page="page"\n                                                   :total="total"\n                                                   :total-visible="7"\n                                                   @page-change="onPageChange">\n                                    </sw-pagination>\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_detail_runs_other_grid_column_log %}\n                                <template #column-task="{ item }">\n                                    {{ $tc(`swag-paypal-pos.detail.runs.${item.task}Task`) }}\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_detail_runs_card_grid_column_state %}\n                                <template #column-state="{ item }">\n\n                                    {% block swag_paypal_pos_detail_runs_card_grid_column_state_label %}\n                                        <sw-label appearance="pill"\n                                                  :variant="getLabelVariant(item)">\n                                            {{ $tc(getLabel(item)) }}\n                                        </sw-label>\n                                    {% endblock %}\n\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_detail_runs_card_grid_column_date %}\n                                <template #column-date="{ item }">\n\n                                    {% block swag_paypal_pos_detail_runs_card_grid_column_date_formatted %}\n                                        {{ item.finishedAt | date({\n                                            hour: \'2-digit\',\n                                            minute: \'2-digit\',\n                                            day: \'2-digit\',\n                                            month: \'2-digit\',\n                                            year: \'2-digit\'\n                                        }) }}\n                                    {% endblock %}\n\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_detail_runs_card_grid_actions %}\n                                <template #actions="{ item }">\n\n                                    {% block swag_paypal_pos_detail_runs_card_grid_actions_details %}\n                                        <sw-context-menu-item :disabled="item.logs.length <= 0"\n                                                              @click="onShowModal(item.id)">\n                                            {{ $tc(\'swag-paypal-pos.detail.runs.actions.showDetails\') }}\n                                        </sw-context-menu-item>\n                                    {% endblock %}\n\n                                </template>\n                            {% endblock %}\n\n                        </sw-data-grid>\n                    </template>\n                {% endblock %}\n\n                {% block swag_paypal_pos_detail_runs_card_empty_state %}\n                    <template #default>\n                        <sw-empty-state v-if="total < 1"\n                                        class="swag-paypal-pos-detail-runs__empty-state"\n                                        :title="$tc(\'swag-paypal-pos.detail.runs.emptyState.title\')"\n                                        :subline="$tc(\'swag-paypal-pos.detail.runs.emptyState.message\')">\n                        </sw-empty-state>\n                    </template>\n                {% endblock %}\n\n                {% block swag_paypal_pos_detail_runs_card_toolbar %}\n                    <template #toolbar v-if="total > 0">\n\n                        {% block swag_paypal_pos_detail_runs_card_toolbar_container %}\n                            <sw-container columns="1fr min-content"\n                                          align="center">\n\n                                {% block swag_paypal_pos_detail_runs_card_toolbar_container_text %}\n                                    <p>{{ $tc(\'swag-paypal-pos.detail.runs.toolbarText\') }}</p>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_detail_runs_card_toolbar_container_button %}\n                                    <sw-button @click="onClearLogs">\n                                        {{ $tc(\'swag-paypal-pos.detail.cleanLog\') }}\n                                    </sw-button>\n                                {% endblock %}\n\n                            </sw-container>\n                        {% endblock %}\n\n                    </template>\n                {% endblock %}\n\n            </sw-card>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_runs_log_modal %}\n            <sw-modal v-if="showModal"\n                      class="swag-paypal-pos-detail-runs__modal"\n                      :title="$tc(\'swag-paypal-pos.detail.runs.title\')"\n                      :isLoading="isLoading"\n                      variant="large"\n                      @modal-close="onCloseModal">\n\n                {% block swag_paypal_pos_detail_runs_log_modal_logs %}\n                    <swag-paypal-pos-detail-logs :runId="currentRunId"></swag-paypal-pos-detail-logs>\n                {% endblock %}\n\n                {% block swag_paypal_pos_detail_runs_log_modal_footer %}\n                    <template #modal-footer>\n\n                        {% block swag_paypal_pos_detail_runs_log_modal_footer_close_modal_button %}\n                            <sw-button variant="primary"\n                                       @click="onCloseModal">\n                                {{ $tc(\'global.default.cancel\') }}\n                            </sw-button>\n                        {% endblock %}\n\n                    </template>\n                {% endblock %}\n\n            </sw-modal>\n        {% endblock %}\n\n    </div>\n{% endblock %}\n'},OpH4:function(e,a){e.exports='{% block swag_paypal_pos_wizard_connection_success %}\n    <div class="swag-paypal-pos-wizard-connection-success">\n\n        {% block swag_paypal_pos_wizard_connection_success_headline_content %}\n            <div class="swag-paypal-pos-wizard-connection-success__content">\n\n                {% block swag_paypal_pos_wizard_connection_success_icon %}\n                    <div class="swag-paypal-pos-wizard-connection-success__icon-wrapper">\n                        <sw-icon class="swag-paypal-pos-wizard-connection-success__icon"\n                                 name="default-action-thumb-up"\n                                 size="80px"\n                                 color="#37D046">\n                        </sw-icon>\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_success_headline %}\n                    <div class="swag-paypal-pos-wizard-connection-success__headline">\n                        {{ $tc(\'swag-paypal-pos.wizard.connectionSuccess.headline\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_success_info %}\n                    <div class="swag-paypal-pos-wizard-connection-success__info">\n                        {{ $tc(\'swag-paypal-pos.wizard.connectionSuccess.info\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_success_user %}\n                    <sw-card class="swag-paypal-pos-wizard-connection-success__user"\n                             :isLoading="isFetchingInformation">\n                        <sw-container class="swag-paypal-pos-wizard-connection-success__user-container"\n                                      columns="30px auto 150px"\n                                      align="center"\n                                      gap="30px">\n\n                            {% block swag_paypal_pos_wizard_connection_success_user_avatar %}\n                                <sw-avatar\n                                        class="swag-paypal-pos-wizard-connection-success__user-avatar"\n                                        size="40px"\n                                        :firstName="iZettleUser.firstName"\n                                        :lastName="iZettleUser.lastName">\n                                </sw-avatar>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_wizard_connection_success_user_information %}\n                                <div class="swag-paypal-pos-wizard-connection-success__user-info">\n\n                                    {% block swag_paypal_pos_wizard_connection_success_user_information_real %}\n                                        <div class="swag-paypal-pos-wizard-connection-success__user-info-name">\n                                            {{ iZettleUser.fullName }}\n                                        </div>\n                                        <div class="swag-paypal-pos-wizard-connection-success__user-info-mail">\n                                            {{ iZettleUser.mail }}\n                                        </div>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_wizard_connection_success_user_disconnect_button %}\n                                <sw-button class="swag-paypal-pos-wizard-connection-success__user-disconnect"\n                                           variant="ghost"\n                                           size="small"\n                                           @click="onDisconnect">\n                                    {{ $tc(\'swag-paypal-pos.wizard.connectionSuccess.disconnectButton\') }}\n                                </sw-button>\n                            {% endblock %}\n                        </sw-container>\n                    </sw-card>\n                {% endblock %}\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_connection_success_disclaimer %}\n            <div class="swag-paypal-pos-wizard-connection-success__disclaimer">\n                {{ $tc(\'swag-paypal-pos.wizard.connectionSuccess.disclaimer\') }}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},PEFo:function(e,a,n){},QGXT:function(e,a){e.exports='{% block sw_text_field %}\n    {% block sw_paypal_locale_field %}\n        <div class="sw-paypal-locale-field">\n\n            {% block sw_paypal_locale_field_contextual_field %}\n                <sw-contextual-field class="sw-field--text"\n                                     v-bind="$attrs"\n                                     :name="formFieldName"\n                                     :error="error"\n                                     @inheritance-restore="$emit(\'inheritance-restore\', $event)"\n                                     @inheritance-remove="$emit(\'inheritance-remove\', $event)"\n                                     v-on="$listeners">\n\n                    <template #sw-field-input="{ identification, error, disabled, size, setFocusClass, removeFocusClass, hasSuffix, hasPrefix }">\n                        <input type="text"\n                               :name="identification"\n                               :id="identification"\n                               :disabled="disabled"\n                               :value="currentValue"\n                               :placeHolder="placeholder"\n                               @input="onInput"\n                               @focus="setFocusClass"\n                               @blur="onBlur($event, removeFocusClass)"\n                               v-on="additionalListeners">\n                    </template>\n                </sw-contextual-field>\n            {% endblock %}\n\n            {% block sw_paypal_locale_field_information %}\n                <p class="sw-paypal-locale-field__text">\n\n                    {% block sw_paypal_locale_field_information_text %}\n                        {{ $tc(\'swag-paypal.settingForm.locale-field.infobox.text\') }}\n                    {% endblock %}\n\n                    {% block sw_paypal_locale_field_information_href %}\n                        <a class="sw-paypal-locale-field__text-href"\n                           href="https://developer.paypal.com/docs/api/reference/locale-codes/"\n                           target="_blank">\n                            {{ $tc(\'swag-paypal.settingForm.locale-field.infobox.href\') }}\n                        </a>\n                    {% endblock %}\n\n                    {% block sw_paypal_locale_field_information_icon %}\n                        <sw-icon class="sw-paypal-locale-field__text-icon"\n                                 name="default-action-external"\n                                 size="7.5">\n                        </sw-icon>\n                    {% endblock %}\n                </p>\n            {% endblock %}\n        </div>\n    {% endblock %}\n{% endblock %}\n'},QL3A:function(e,a,n){},QZV2:function(e,a){e.exports='{% block swag_paypal_pos_status %}\n    <sw-card :class="statusClasses"\n             :isLoading="isLoading"\n             :title="title">\n\n        {% block swag_paypal_pos_status_icon %}\n            <div class="swag-paypal-pos-status__icon-base">\n                <sw-icon :class="iconClasses"\n                         :name="icon">\n                </sw-icon>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_status %}\n            <div class="swag-paypal-pos-status__status">\n                <slot name="status">{{ status }}</slot>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_detail %}\n            <div class="swag-paypal-pos-status__detail">\n                <slot name="detail"></slot>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_substatus %}\n            <div v-if="showSubStatus" class="swag-paypal-pos-status__substatus">\n\n                {% block swag_paypal_pos_status_substatus_icon %}\n                    <sw-icon v-if="showSubIcon"\n                             :class="subIconClasses"\n                             :name="subIcon">\n                    </sw-icon>\n                {% endblock %}\n\n                {% block swag_paypal_pos_status_substatus_content %}\n                    <span>\n                        <slot name="substatus"></slot>\n                    </span>\n                {% endblock %}\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_actions %}\n            <div class="swag-paypal-pos-status__actions">\n                <slot name="actions"></slot>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_disabled %}\n            <div v-if="disabled" class="swag-paypal-pos-status__disabled">\n                <slot name="disabledText">{{ disabledText }}</slot>\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},QxFK:function(e,a,n){},R7U6:function(e,a,n){"use strict";n.r(a);var t=n("UgVe"),s=n.n(t);n("G59K");const{Component:i}=Shopware;i.register("swag-image-slider",{template:s.a,props:{images:{type:Array,required:!0},canvasWidth:{type:Number,required:!0},canvasHeight:{type:Number,required:!0},gap:{type:Number,required:!1,default:20},overflow:{type:String,required:!1,default:"hidden",validator:e=>["hidden","visible"].includes(e)}},data:()=>({currentPageNumber:0}),computed:{componentStyles(){return{width:this.canvasWidth+"px"}},containerStyles(){return{...this.componentStyles,height:this.canvasHeight+"px",overflow:this.overflow}},scrollableContainerStyles(){return{width:this.images.length*this.canvasWidth+(this.images.length-1)*this.gap+"px",transform:`translateX(-${this.currentPageNumber*(this.canvasWidth+this.gap)}px)`}}},methods:{onButtonClick(e){this.currentPageNumber=e},elementStyles(e){let a=null;return e!==this.images.length-1&&(a=this.gap+"px"),{...this.componentStyles,height:this.canvasHeight+"px",marginRight:a}},imageAlt(e){return this.$tc("swag-image-slider.imageAlt",0,{index:e+1,total:this.images.length})}}});n("VVuM"),n("lA1j"),n("Lgxv");var l=n("EGIw"),o=n.n(l);n("9OLG");const{Component:r,Mixin:c}=Shopware;r.override("sw-first-run-wizard-paypal-credentials",{template:o.a,inject:["systemConfigApiService"],mixins:[c.getByName("notification"),c.getByName("swag-paypal-credentials-loader")],data:()=>({config:{},isLoading:!1}),computed:{sandboxMode(){return this.config["SwagPayPal.settings.sandbox"]||!1},onboardingUrl(){return this.sandboxMode?this.onboardingUrlSandbox:this.onboardingUrlLive},onboardingCallback(){return this.sandboxMode?"onboardingCallbackSandbox":"onboardingCallbackLive"},buttonConfig(){return this.$super("buttonConfig").reduce((e,a)=>("next"===a.key&&(a.action=this.onClickNext.bind(this)),[...e,a]),[])}},created(){this.createdComponent()},methods:{createdComponent(){this.$super("createdComponent"),this.fetchPayPalConfig()},onPayPalCredentialsLoadSuccess(e,a,n){this.setConfig(e,a,n)},onPayPalCredentialsLoadFailed(e){this.setConfig("","",e),this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleFetchedError"),message:this.$tc("swag-paypal-frw-credentials.messageFetchedError"),duration:1e4})},setConfig(e,a,n){n?(this.$set(this.config,"SwagPayPal.settings.clientIdSandbox",e),this.$set(this.config,"SwagPayPal.settings.clientSecretSandbox",a)):(this.$set(this.config,"SwagPayPal.settings.clientId",e),this.$set(this.config,"SwagPayPal.settings.clientSecret",a))},onClickNext(){return(this.config["SwagPayPal.settings.sandbox"]||this.config["SwagPayPal.settings.clientId"]&&this.config["SwagPayPal.settings.clientSecret"])&&(!this.config["SwagPayPal.settings.sandbox"]||this.config["SwagPayPal.settings.clientIdSandbox"]&&this.config["SwagPayPal.settings.clientSecretSandbox"])?this.isGetCredentialsSuccessful?this.saveConfig().then(()=>(this.$emit("frw-redirect","sw.first.run.wizard.index.plugins"),Promise.resolve(!1))).catch(()=>Promise.resolve(!0)):this.testApiCredentials().then(e=>"success"===e?this.saveConfig().then(()=>(this.$emit("frw-redirect","sw.first.run.wizard.index.plugins"),Promise.resolve(!1))).catch(()=>Promise.resolve(!0)):Promise.resolve(!0)):(this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleNoCredentials"),message:this.$tc("swag-paypal-frw-credentials.messageNoCredentials")}),Promise.resolve(!0))},fetchPayPalConfig(){return this.isLoading=!0,this.systemConfigApiService.getValues("SwagPayPal.settings",null).then(e=>{this.config=e}).finally(()=>{this.isLoading=!1})},saveConfig(){return this.isLoading=!0,this.systemConfigApiService.saveValues(this.config,null).then(()=>{this.isLoading=!1})},testApiCredentials(){this.isLoading=!0;const e=this.config["SwagPayPal.settings.sandbox"]?this.config["SwagPayPal.settings.clientIdSandbox"]:this.config["SwagPayPal.settings.clientId"],a=this.config["SwagPayPal.settings.sandbox"]?this.config["SwagPayPal.settings.clientSecretSandbox"]:this.config["SwagPayPal.settings.clientSecret"];return this.SwagPayPalApiCredentialsService.validateApiCredentials(e,a,this.config["SwagPayPal.settings.sandbox"]).then(e=>e.credentialsValid?(this.isLoading=!1,"success"):"error").catch(e=>{if(e.response.data&&e.response.data.errors){const a=e.response.data.errors.map(e=>e.detail).join(" / ");this.createNotificationError({title:this.$tc("global.default.error"),message:a}),this.createNotificationError({title:this.$tc("swag-paypal-frw-credentials.titleTestError"),message:a}),this.isLoading=!1}return"error"})},onCredentialsChanged(){this.isGetCredentialsSuccessful=null}}});var p=n("G/Pn"),d=n.n(p);n("wqkP");const{Component:u}=Shopware;u.override("sw-sales-channel-modal-detail",{template:d.a,methods:{isPayPalPosSalesChannel:e=>"1ce0868f406d47d98cfe4b281e62f099"===e}});var g=n("+Mrb"),h=n.n(g);n("D+dM");const{Component:w}=Shopware;w.override("sw-sales-channel-modal-grid",{template:h.a,methods:{isPayPalPosSalesChannel(e){return"1ce0868f406d47d98cfe4b281e62f099"===this.salesChannelTypes.find(a=>a.id===e).id}}});var _=n("7f4H"),y=n.n(_);n("hYJc");var m={MERCHANT_LOCATION_GERMANY:"germany",MERCHANT_LOCATION_OTHER:"other",WEBHOOK_RESULT_CREATED:"created",WEBHOOK_RESULT_NOTHING:"nothing",WEBHOOK_RESULT_UPDATED:"updated"};const{Mixin:b,Defaults:f}=Shopware,{Criteria:S}=Shopware.Data,{hasOwnProperty:v}=Shopware.Utils.object;Shopware.Component.register("swag-paypal",{template:y.a,inject:["SwagPayPalWebhookRegisterService","SwagPayPalApiCredentialsService","SwagPaypalPaymentMethodServiceService","repositoryFactory"],mixins:[b.getByName("notification")],data:()=>({isLoading:!1,isSaveSuccessful:!1,isTestSuccessful:!1,isTestSandboxSuccessful:!1,clientIdFilled:!1,clientSecretFilled:!1,clientIdSandboxFilled:!1,clientSecretSandboxFilled:!1,sandboxChecked:!1,salesChannels:[],config:null,clientIdErrorState:null,clientSecretErrorState:null,clientIdSandboxErrorState:null,clientSecretSandboxErrorState:null,isSetDefaultPaymentSuccessful:!1,isSettingDefaultPaymentMethods:!1,savingDisabled:!1,initialConfigValueSandbox:!1,initialConfigValueWebhookId:null,initialConfigValueWebhookExecuteToken:null,...m}),metaInfo(){return{title:this.$createTitle()}},computed:{showSPBCard(){if(v(this.config,"SwagPayPal.settings.merchantLocation")&&null!==this.config["SwagPayPal.settings.merchantLocation"])return this.config["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_OTHER;return this.$refs.configComponent.allConfigs.null["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_OTHER},showPlusCard(){if(v(this.config,"SwagPayPal.settings.merchantLocation")&&null!==this.config["SwagPayPal.settings.merchantLocation"])return this.config["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_GERMANY;return this.$refs.configComponent.allConfigs.null["SwagPayPal.settings.merchantLocation"]===this.MERCHANT_LOCATION_GERMANY},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")}},watch:{config:{handler(){const e=this.$refs.configComponent.allConfigs.null;null===this.$refs.configComponent.selectedSalesChannelId?(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"],this.clientIdSandboxFilled=!!this.config["SwagPayPal.settings.clientIdSandbox"],this.clientSecretSandboxFilled=!!this.config["SwagPayPal.settings.clientSecretSandbox"],this.sandboxChecked=!!this.config["SwagPayPal.settings.sandbox"]):(this.clientIdFilled=!!this.config["SwagPayPal.settings.clientId"]||!!e["SwagPayPal.settings.clientId"],this.clientSecretFilled=!!this.config["SwagPayPal.settings.clientSecret"]||!!e["SwagPayPal.settings.clientSecret"],this.clientIdSandboxFilled=!!this.config["SwagPayPal.settings.clientIdSandbox"]||!!e["SwagPayPal.settings.clientIdSandbox"],this.clientSecretSandboxFilled=!!this.config["SwagPayPal.settings.clientSecretSandbox"]||!!e["SwagPayPal.settings.clientSecretSandbox"],this.sandboxChecked=!!this.config["SwagPayPal.settings.sandbox"]||!!e["SwagPayPal.settings.sandbox"]),this.initialConfigValueSandbox!==this.config["SwagPayPal.settings.sandbox"]?(this.config["SwagPayPal.settings.webhookId"]=null,this.config["SwagPayPal.settings.webhookExecuteToken"]=null):(this.config["SwagPayPal.settings.webhookId"]=this.initialConfigValueWebhookId,this.config["SwagPayPal.settings.webhookExecuteToken"]=this.initialConfigValueWebhookExecuteToken)},deep:!0}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!0;const e=new S;e.addFilter(S.equalsAny("typeId",[f.storefrontSalesChannelTypeId,f.apiSalesChannelTypeId])),this.salesChannelRepository.search(e,Shopware.Context.api).then(e=>{e.add({id:null,translated:{name:this.$tc("sw-sales-channel-switch.labelDefaultOption")}}),this.salesChannels=e}).finally(()=>{this.isLoading=!1})},onSave(){(this.sandboxChecked||this.clientIdFilled&&this.clientSecretFilled)&&(!this.sandboxChecked||this.clientIdSandboxFilled&&this.clientSecretSandboxFilled)?this.save():this.setErrorStates()},onInitialInput(e){this.initialConfigValueSandbox=e["SwagPayPal.settings.sandbox"],this.initialConfigValueWebhookId=e["SwagPayPal.settings.webhookId"],this.initialConfigValueWebhookExecuteToken=e["SwagPayPal.settings.webhookExecuteToken"]},save(){this.isLoading=!0,this.$refs.configComponent.save().then(e=>{this.isLoading=!1,this.isSaveSuccessful=!0,e&&(this.config=e),this.registerWebhook()}).catch(()=>{this.isLoading=!1})},registerWebhook(){this.SwagPayPalWebhookRegisterService.registerWebhook(this.$refs.configComponent.selectedSalesChannelId).then(e=>{const a=e.result;a!==this.WEBHOOK_RESULT_NOTHING&&(a!==this.WEBHOOK_RESULT_CREATED?(a===this.WEBHOOK_RESULT_UPDATED&&this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-paypal.settingForm.messageWebhookUpdated")}),this.isLoading=!1):this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-paypal.settingForm.messageWebhookCreated")}))}).catch(e=>{if(e.response.data&&e.response.data.errors){let a=this.$tc("swag-paypal.settingForm.messageWebhookError")+"<br><br><ul>";e.response.data.errors.forEach(e=>{a=`${a}<li>${e.detail}</li>`}),a+="</li>",this.createNotificationError({title:this.$tc("swag-paypal.settingForm.titleError"),message:a})}this.isLoading=!1})},setErrorStates(){const e={code:1,detail:this.$tc("swag-paypal.messageNotBlank")};this.sandboxChecked?(this.clientIdSandboxErrorState=null,this.clientSecretSandboxErrorState=null,this.clientIdSandboxFilled||(this.clientIdSandboxErrorState=e),this.clientSecretSandboxFilled||(this.clientSecretSandboxErrorState=e)):(this.clientIdErrorState=null,this.clientSecretErrorState=null,this.clientIdFilled||(this.clientIdErrorState=e),this.clientSecretFilled||(this.clientSecretErrorState=e))},onSetPaymentMethodDefault(){this.isSettingDefaultPaymentMethods=!0,this.SwagPaypalPaymentMethodServiceService.setDefaultPaymentForSalesChannel(this.$refs.configComponent.selectedSalesChannelId).then(()=>{this.isSettingDefaultPaymentMethods=!1,this.isSetDefaultPaymentSuccessful=!0})},preventSave(e){this.savingDisabled=!!e}}});var C=n("A8yT"),k=n.n(C);const{Component:P}=Shopware;P.override("sw-plugin-list",{template:k.a});var x=n("4OKV"),I=n.n(x);const{Component:$}=Shopware;$.override("sw-settings-index",{template:I.a});var L=n("9gbH"),T=n.n(L);n("L6Rc");const{Component:A}=Shopware;A.register("sw-paypal-behaviour",{template:T.a,name:"SwagPaypalBehaviour",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},data:()=>({...m}),computed:{intentOptions(){return[{id:"sale",name:this.$tc("swag-paypal.settingForm.behaviour.intent.sale")},{id:"authorize",name:this.$tc("swag-paypal.settingForm.behaviour.intent.authorize")},{id:"order",name:this.$tc("swag-paypal.settingForm.behaviour.intent.order")}]},merchantLocationOptions(){return[{id:this.MERCHANT_LOCATION_GERMANY,name:this.$tc("swag-paypal.settingForm.behaviour.merchantLocation.germany")},{id:this.MERCHANT_LOCATION_OTHER,name:this.$tc("swag-paypal.settingForm.behaviour.merchantLocation.other")}]},landingPageOptions(){return[{id:"Login",name:this.$tc("swag-paypal.settingForm.behaviour.landingPage.options.Login")},{id:"Billing",name:this.$tc("swag-paypal.settingForm.behaviour.landingPage.options.Billing")}]}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var z=n("JlGH"),F=n.n(z);const{Component:E,Mixin:D}=Shopware;E.register("sw-paypal-credentials",{template:F.a,name:"SwagPaypalCredentials",mixins:[D.getByName("notification"),D.getByName("swag-paypal-credentials-loader")],props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0},clientIdErrorState:{required:!0},clientSecretErrorState:{required:!0},clientIdSandboxErrorState:{required:!0},clientSecretSandboxErrorState:{required:!0},clientIdFilled:{type:Boolean,required:!0},clientSecretFilled:{type:Boolean,required:!0},clientIdSandboxFilled:{type:Boolean,required:!0},clientSecretSandboxFilled:{type:Boolean,required:!0},isLoading:{type:Boolean,required:!0}},data:()=>({isTestingLive:!1,isTestingSandbox:!1,isTestLiveSuccessful:!1,isTestSandboxSuccessful:!1}),computed:{testLiveButtonDisabled(){return this.isLoading||!this.clientSecretFilled||!this.clientIdFilled||this.isTestingLive},testSandboxButtonDisabled(){return this.isLoading||!this.clientSecretSandboxFilled||!this.clientIdSandboxFilled||this.isTestingSandbox}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e,onTest(e){let a,n;e?this.isTestingSandbox=!0:this.isTestingLive=!0,e?(a=this.actualConfigData["SwagPayPal.settings.clientIdSandbox"]||this.allConfigs.null["SwagPayPal.settings.clientIdSandbox"],n=this.actualConfigData["SwagPayPal.settings.clientSecretSandbox"]||this.allConfigs.null["SwagPayPal.settings.clientSecretSandbox"]):(a=this.actualConfigData["SwagPayPal.settings.clientId"]||this.allConfigs.null["SwagPayPal.settings.clientId"],n=this.actualConfigData["SwagPayPal.settings.clientSecret"]||this.allConfigs.null["SwagPayPal.settings.clientSecret"]),this.SwagPayPalApiCredentialsService.validateApiCredentials(a,n,e).then(a=>{a.credentialsValid&&(e?(this.isTestingSandbox=!1,this.isTestSandboxSuccessful=!0):(this.isTestingLive=!1,this.isTestLiveSuccessful=!0))}).catch(a=>{if(a.response.data&&a.response.data.errors){let n=`<b>${this.$tc("swag-paypal.settingForm.messageTestError")}</b> `;n+=a.response.data.errors.map(e=>e.detail).join(" / "),this.createNotificationError({title:this.$tc("global.default.error"),message:n}),e?(this.isTestingSandbox=!1,this.isTestSandboxSuccessful=!1):(this.isTestingLive=!1,this.isTestLiveSuccessful=!1)}})},onPayPalCredentialsLoadSuccess(e,a,n){n?(this.$set(this.actualConfigData,"SwagPayPal.settings.clientIdSandbox",e),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecretSandbox",a)):(this.$set(this.actualConfigData,"SwagPayPal.settings.clientId",e),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecret",a))},onPayPalCredentialsLoadFailed(e){e?(this.$set(this.actualConfigData,"SwagPayPal.settings.clientIdSandbox",""),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecretSandbox","")):(this.$set(this.actualConfigData,"SwagPayPal.settings.clientId",""),this.$set(this.actualConfigData,"SwagPayPal.settings.clientSecret","")),this.createNotificationError({title:this.$tc("swag-paypal.settingForm.credentials.button.titleFetchedError"),message:this.$tc("swag-paypal.settingForm.credentials.button.messageFetchedError"),duration:1e4})}}});var B=n("aE/U"),R=n.n(B);const{Component:N}=Shopware;N.register("sw-paypal-express",{template:R.a,name:"SwagPaypalExpress",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},computed:{buttonColorOptions(){return[{id:"blue",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.blue")},{id:"black",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.black")},{id:"gold",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.gold")},{id:"silver",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.silver")}]},buttonShapeOptions(){return[{id:"pill",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.pill")},{id:"rect",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.rect")}]}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e,preventSave(e){this.$emit("preventSave",e)}}});var V=n("CQfv"),O=n.n(V);const{Component:M}=Shopware;M.register("sw-paypal-installment",{template:O.a,name:"SwagPaypalInstallment",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var U=n("w9E9"),q=n.n(U);const{Component:Z}=Shopware;Z.register("sw-paypal-plus",{template:q.a,name:"SwagPaypalPlus",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e}});var H=n("9MLB"),j=n.n(H);const{Component:W}=Shopware;W.register("sw-paypal-spb",{template:j.a,name:"SwagPaypalSpb",props:{actualConfigData:{type:Object,required:!0},allConfigs:{type:Object,required:!0},selectedSalesChannelId:{required:!0}},computed:{buttonColorOptions(){return[{id:"blue",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.blue")},{id:"black",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.black")},{id:"gold",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.gold")},{id:"silver",name:this.$tc("swag-paypal.settingForm.express.ecsButtonColor.options.silver")}]},buttonShapeOptions(){return[{id:"pill",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.pill")},{id:"rect",name:this.$tc("swag-paypal.settingForm.express.ecsButtonShape.options.rect")}]}},methods:{checkTextFieldInheritance:e=>"string"!=typeof e||e.length<=0,checkBoolFieldInheritance:e=>"boolean"!=typeof e,preventSave(e){this.$emit("preventSave",e)}}});var K=n("QGXT"),G=n.n(K);n("BZYb");const{Component:Y}=Shopware,{debounce:J}=Shopware.Utils;Y.extend("sw-paypal-locale-field","sw-text-field",{template:G.a,data:()=>({error:null}),methods:{onInput:J((function(e){this.checkValue(e.target.value)}),350),onBlur(e,a){a(),this.checkValue(e.target.value)},checkValue(e){if(this.$emit("change",e||""),!e||/^[a-z]{2}_[A-Z]{2}$/.exec(e))return this.preventSave(!1),void(this.error=null);this.preventSave(!0),this.error={code:1,detail:this.$tc("swag-paypal.settingForm.locale-field.error.detail")}},preventSave(e){this.$emit("preventSave",e)}}});var Q=n("OJHy"),X=n("hOdW");const{Module:ee}=Shopware;ee.register("swag-paypal",{type:"plugin",name:"SwagPayPal",title:"swag-paypal.general.mainMenuItemGeneral",description:"swag-paypal.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",snippets:{"de-DE":Q,"en-GB":X},routes:{index:{component:"swag-paypal",path:"index",meta:{parentPath:"sw.settings.index"}}}});var ae=n("GiWa"),ne=n.n(ae),te=(n("6/AX"),n("8+5b")),se=n.n(te);const{Component:ie,Mixin:le}=Shopware,oe=Shopware.Utils;ie.register("swag-paypal-payment-action-capture",{template:se.a,inject:["SwagPayPalPaymentService"],mixins:[le.getByName("notification")],props:{paymentResource:{type:Object,required:!0},maxCaptureValue:{type:Number,required:!0},orderId:{type:String,required:!0}},data(){return{isFinalCapture:!0,captureValue:this.maxCaptureValue,isLoading:!0,currency:this.paymentResource.transactions[0].amount.currency}},computed:{showHint(){return this.isFinalCapture&&this.captureValue!==this.maxCaptureValue}},created(){this.createdComponent()},methods:{createdComponent(){this.isLoading=!1},capture(){const e=this.captureValue,a=this.currency,n=this.isFinalCapture,t=this.paymentResource.intent,s=this.getResourceId(this.paymentResource);this.isLoading=!0,this.SwagPayPalPaymentService.capturePayment(this.orderId,t,s,e,a,n).then(()=>{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-paypal-payment.captureAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${oe.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(a){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1}})},getResourceId(e){let a=null;return e.transactions[0].related_resources.forEach(e=>{e.authorization&&(a=e.authorization.id),e.order&&(a=e.order.id)}),a}}});var re=n("Rq5H"),ce=n.n(re);const{Component:pe,Mixin:de,Filter:ue}=Shopware,ge=Shopware.Utils;pe.register("swag-paypal-payment-action-refund",{template:ce.a,inject:["SwagPayPalPaymentService"],mixins:[de.getByName("notification")],props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({captures:[],selectedCapture:{},existingRefunds:[],refundAmount:0,refundableAmount:0,refundDescription:"",refundReason:"",refundInvoiceNumber:"",isLoading:!0,selectedCaptureId:""}),computed:{dateFilter:()=>ue.getByName("date")},created(){this.createdComponent()},methods:{createdComponent(){this.getRefundableCaptures(),this.mapRefunds(),this.selectedCaptureId=this.captures[0].id,this.isLoading=!1,this.preserveCapture(),this.refundAmount=Number(this.captures[0].refundableAmount)},getRefundableCaptures(){const e=this.paymentResource.transactions[0].related_resources;this.captures=e.reduce((e,a)=>{if(a.sale){const n=a.sale;"refunded"!==n.state&&e.push(this.formatCapture(n,"sale"))}if(a.capture){const n=a.capture;"refunded"!==n.state&&e.push(this.formatCapture(n,"capture"))}return a.refund&&this.existingRefunds.push(a.refund),e},this.captures)},formatCapture(e,a){return{label:`${this.dateFilter(e.create_time)} (${e.amount.total} ${e.amount.currency}) - ${e.id} [${e.state}]`,id:e.id,refundableAmount:e.amount.total,currency:e.amount.currency,type:a}},mapRefunds(){this.existingRefunds.forEach(e=>{const a=this.captures.find(a=>{switch(a.type){case"capture":return e.capture_id===a.id;case"sale":return e.sale_id===a.id;default:return!1}});if(a){let n=Number(e.amount.total);n<0&&(n*=-1),a.refundableAmount-=n}})},preserveCapture(){const e=this.captures.find(e=>e.id===this.selectedCaptureId);this.selectedCapture=e,this.refundableAmount=Number(e.refundableAmount),this.refundAmount=Number(e.refundableAmount)},refund(){this.isLoading=!0;let e=this.refundAmount;const a=this.refundDescription,n=this.selectedCapture.currency,t=this.selectedCapture.type,s=this.selectedCapture.id,i=this.refundReason,l=this.refundInvoiceNumber;0===e&&(e=this.refundableAmount),this.SwagPayPalPaymentService.refundPayment(this.orderId,t,s,e,n,a,i,l).then(()=>{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-paypal-payment.refundAction.successMessage")}),this.isLoading=!1,this.$emit("modal-close"),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${ge.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(a){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1}})}}});var he=n("4m17"),we=n.n(he);const{Component:_e,Mixin:ye}=Shopware,me=Shopware.Utils;_e.register("swag-paypal-payment-action-void",{template:we.a,inject:["SwagPayPalPaymentService"],mixins:[ye.getByName("notification")],props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({isLoading:!1}),methods:{voidPayment(){this.isLoading=!0;const e=this.paymentResource.intent,a=this.getResourceId(),n=this.$route.params.id;this.SwagPayPalPaymentService.voidPayment(this.orderId,e,a,n).then(()=>{this.createNotificationSuccess({title:this.$tc("global.default.success"),message:this.$tc("swag-paypal-payment.voidAction.successMessage")}),this.isLoading=!1,this.closeModal(),this.$nextTick(()=>{this.$router.replace(`${this.$route.path}?hash=${me.createId()}`)})}).catch(e=>{try{this.createNotificationError({title:e.response.data.errors[0].title,message:e.response.data.errors[0].detail,autoClose:!1})}catch(a){this.createNotificationError({title:e.title,message:e.message,autoClose:!1})}finally{this.isLoading=!1}})},getResourceId(){const e=this.paymentResource.transactions[0].related_resources[0];return e.order?e.order.id:e.authorization.id},closeModal(){this.$emit("modal-close")}}});const{Component:be}=Shopware;be.register("swag-paypal-payment-actions",{template:ne.a,props:{paymentResource:{type:Object,required:!0},orderId:{type:String,required:!0}},data:()=>({modalType:"",refundableAmount:0,captureableAmount:0,showVoidButton:!1}),created(){this.createdComponent()},methods:{createdComponent(){this.setPaymentActionAmounts(),this.setShowVoidButton(),this.captureableAmount=this.formatAmount(this.captureableAmount),this.refundableAmount=this.formatAmount(this.refundableAmount)},spawnModal(e){this.modalType=e},closeModal(){this.modalType=""},setPaymentActionAmounts(){const e=this.paymentResource.transactions;if(!e)return;e[0].related_resources.forEach(e=>{if(e.authorization&&"completed"!==e.authorization.state&&(this.captureableAmount+=Number(e.authorization.amount.total)),e.order&&"completed"!==e.order.state&&(this.captureableAmount+=Number(e.order.amount.total)),e.sale&&(this.refundableAmount+=Number(e.sale.amount.total)),e.capture){const a=Number(e.capture.amount.total);this.captureableAmount-=a,this.refundableAmount+=a}if(e.refund&&"failed"!==e.refund.state&&"cancelled"!==e.refund.state){let a=Number(e.refund.amount.total);a>0&&(a*=-1),this.refundableAmount+=a}})},setShowVoidButton(){const e=this.paymentResource.transactions;if(!e)return;const a=e[0].related_resources[0];if(!a)return;const n=["voided","captured","completed"];if(!a.sale){if(a.order){const e=a.order;if(n.includes(e.state))return void(this.captureableAmount=0);this.showVoidButton=!0}if(a.authorization){const e=a.authorization;if(n.includes(e.state))return void(this.captureableAmount=0);this.showVoidButton=!0}}},formatAmount:e=>Number(Math.round(e+"e2")+"e-2")}});var fe=n("9lyR"),Se=n.n(fe);const{Component:ve}=Shopware;ve.extend("swag-paypal-text-field","sw-text-field",{template:Se.a});var Ce=n("Xge3"),ke=n.n(Ce);n("vGFi");const{Component:Pe,Context:xe}=Shopware,Ie=Shopware.Data.Criteria;Pe.override("sw-order-detail",{template:ke.a,data:()=>({isPayPalPayment:!1}),computed:{isEditable(){return!this.isPayPalPayment||"swag.paypal.payment.detail"!==this.$route.name},showTabs:()=>!0},watch:{orderId:{deep:!0,handler(){if(!this.orderId)return void this.setIsPayPalPayment(null);const e=this.repositoryFactory.create("order"),a=new Ie(1,1);a.addAssociation("transactions"),a.getAssociation("transactions").addSorting(Ie.sort("createdAt")),e.get(this.orderId,xe.api,a).then(e=>{const a=e.transactions.length,n=a-1;if(a<=0||!e.transactions[n].paymentMethodId)return void this.setIsPayPalPayment(null);const t=e.transactions[n].paymentMethodId;null!=t&&this.setIsPayPalPayment(t)})},immediate:!0}},methods:{setIsPayPalPayment(e){if(!e)return;this.repositoryFactory.create("payment_method").get(e,xe.api).then(e=>{this.isPayPalPayment="handler_swag_paypalpaymenthandler"===e.formattedHandlerIdentifier||"handler_swag_paypalpuipaymenthandler"===e.formattedHandlerIdentifier})}}});var $e=n("Mge0"),Le=n.n($e);n("+M/s");const{Component:Te,Mixin:Ae,Filter:ze,Context:Fe}=Shopware,Ee=Shopware.Data.Criteria;Te.register("swag-paypal-payment-detail",{template:Le.a,inject:["SwagPayPalPaymentService","repositoryFactory"],mixins:[Ae.getByName("notification")],data:()=>({order:{},paymentResource:{},relatedResources:[],isLoading:!0,createDateTime:"",updateDateTime:"",currency:"",amount:{details:{subtotal:0}},payerId:"",orderTransactionState:null,showPaymentDetails:!0}),computed:{dateFilter:()=>ze.getByName("date"),relatedResourceColumns(){return[{property:"type",label:this.$tc("swag-paypal-payment.transactionHistory.types.type"),rawData:!0},{property:"total",label:this.$tc("swag-paypal-payment.transactionHistory.types.amount"),rawData:!0},{property:"id",label:this.$tc("swag-paypal-payment.transactionHistory.types.trackingId"),rawData:!0},{property:"status",label:this.$tc("swag-paypal-payment.transactionHistory.types.state"),rawData:!0},{property:"transactionFee",label:this.$tc("swag-paypal-payment.transactionHistory.types.transactionFee"),rawData:!0},{property:"paymentMode",label:this.$tc("swag-paypal-payment.transactionHistory.types.paymentMode"),rawData:!0},{property:"create",label:this.$tc("swag-paypal-payment.transactionHistory.types.createTime"),rawData:!0},{property:"update",label:this.$tc("swag-paypal-payment.transactionHistory.types.updateTime"),rawData:!0}]},showCanceledPaymentError(){return!1===this.isLoading&&!1===this.showPaymentDetails&&"failed"===this.orderTransactionState},showSandboxLiveError(){return!1===this.isLoading&&!1===this.showPaymentDetails&&"failed"!==this.orderTransactionState}},watch:{$route(){this.resetDataAttributes(),this.createdComponent()},"order.orderNumber"(){this.emitIdentifier()}},created(){this.createdComponent()},methods:{createdComponent(){const e=this.$route.params.id,a=this.repositoryFactory.create("order"),n=new Ee(1,1);n.addAssociation("transactions.stateMachineState"),n.getAssociation("transactions").addSorting(Ee.sort("createdAt")),a.get(e,Fe.api,n).then(e=>{this.order=e;const a=e.transactions.length-1;if(this.orderTransactionState=e.transactions[a].stateMachineState.technicalName,null===e.transactions[a].customFields)return this.isLoading=!1,void(this.showPaymentDetails=!1);const n=e.transactions[a].customFields.swag_paypal_transaction_id;this.SwagPayPalPaymentService.getPaymentDetails(this.order.id,n).then(e=>{this.paymentResource=e,this.setRelatedResources(),this.createDateTime=this.formatDate(this.paymentResource.create_time),this.updateDateTime=this.formatDate(this.paymentResource.update_time),this.currency=this.paymentResource.transactions[0].amount.currency,this.amount=this.paymentResource.transactions[0].amount,this.paymentResource.payer&&this.paymentResource.payer.payer_info&&(this.payerId=this.paymentResource.payer.payer_info.payer_id),this.isLoading=!1}).catch(e=>{if(e.response.data.errors[0].meta.parameters.name&&"INVALID_RESOURCE_ID"===e.response.data.errors[0].meta.parameters.name)return this.isLoading=!1,void(this.showPaymentDetails=!1);try{this.createNotificationError({title:this.$tc("swag-paypal-payment.paymentDetails.error.title"),message:e.response.data.errors[0].detail,autoClose:!1})}catch(a){this.createNotificationError({title:this.$tc("swag-paypal-payment.paymentDetails.error.title"),message:e.message,autoClose:!1})}finally{this.isLoading=!1}})})},formatDate(e){return this.dateFilter(e,{hour:"2-digit",minute:"2-digit",second:"2-digit"})},setRelatedResources(){this.paymentResource.transactions[0].related_resources.forEach(e=>{e.sale&&this.pushRelatedResource("sale",e.sale),e.authorization&&this.pushRelatedResource("authorization",e.authorization),e.order&&this.pushRelatedResource("order",e.order),e.refund&&this.pushRelatedResource("refund",e.refund),e.capture&&this.pushRelatedResource("capture",e.capture)})},pushRelatedResource(e,a){let n=null;const t=a.amount.currency;a.transaction_fee&&(n=`${a.transaction_fee.value} ${t}`),this.relatedResources.push({id:a.id,type:this.$tc("swag-paypal-payment.transactionHistory.states."+e),total:`${a.amount.total} ${t}`,create:this.formatDate(a.create_time),createRaw:a.create_time,update:this.formatDate(a.update_time),transactionFee:n,status:a.state,paymentMode:a.payment_mode}),this.relatedResources.sort((e,a)=>new Date(e.createRaw)-new Date(a.createRaw))},resetDataAttributes(){this.paymentResource={},this.relatedResources=[],this.isLoading=!0,this.createDateTime="",this.updateDateTime="",this.currency="",this.amount={}},emitIdentifier(){const e=null!==this.order?this.order.orderNumber:"";this.$emit("identifier-change",e)}}});var De=n("JSL7"),Be=n("ngFu");const{Module:Re}=Shopware;Re.register("swag-paypal-payment",{type:"plugin",name:"SwagPayPal",title:"swag-paypal-payment.general.title",description:"swag-paypal-payment.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#2b52ff",snippets:{"de-DE":De,"en-GB":Be},routeMiddleware(e,a){"sw.order.detail"===a.name&&a.children.push({component:"swag-paypal-payment-detail",name:"swag.paypal.payment.detail",isChildren:!0,path:"/sw/order/paypal/detail/:id",meta:{parentPath:"sw.order.index"}}),e(a)}});const Ne=Shopware.Classes.ApiService;var Ve=class extends Ne{constructor(e,a,n="paypal"){super(e,a,n)}registerWebhook(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/webhook/register/${e}`,{},{headers:a}).then(e=>Ne.handleResponse(e))}};const Oe=Shopware.Classes.ApiService;var Me=class extends Oe{constructor(e,a,n="paypal"){super(e,a,n)}validateApiCredentials(e,a,n){const t=this.getBasicHeaders();return this.httpClient.get(`_action/${this.getApiBasePath()}/validate-api-credentials`,{params:{clientId:e,clientSecret:a,sandboxActive:n},headers:t}).then(e=>Oe.handleResponse(e))}getApiCredentials(e,a,n,t,s={},i={}){const l=s,o=this.getBasicHeaders(i);return this.httpClient.post(`_action/${this.getApiBasePath()}/get-api-credentials`,{authCode:e,sharedId:a,nonce:n,sandboxActive:t},{params:l,headers:o}).then(e=>Oe.handleResponse(e))}};const Ue=Shopware.Classes.ApiService;var qe=class extends Ue{constructor(e,a,n="paypal/pos"){super(e,a,n)}validateApiCredentials(e,a=null){const n=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/validate-api-credentials`,{apiKey:e,salesChannelId:a},{headers:n}).then(e=>Ue.handleResponse(e))}fetchInformation(e){const a=this.getBasicHeaders(),n=e.extensions.paypalPosSalesChannel.apiKey;return this.httpClient.post(this.getApiBasePath()+"/fetch-information",{apiKey:n},{headers:a}).then(a=>{const n=Ue.handleResponse(a);return delete n.extensions,Object.assign(e,n),e.currencies.length=0,e.currencies.push({id:n.currencyId}),e.languages.length=0,e.languages.push({id:n.languageId}),e.countries.length=0,e.countries.push({id:n.countryId}),n})}cloneProductVisibility(e,a){const n=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/clone-product-visibility`,{fromSalesChannelId:e,toSalesChannelId:a},{headers:n}).then(e=>Ue.handleResponse(e))}getProductCount(e,a){const n=this.getBasicHeaders();return this.httpClient.get(this.getApiBasePath()+"/product-count",{params:{salesChannelId:e,cloneSalesChannelId:a},headers:n}).then(e=>Ue.handleResponse(e))}generateApiUrl(){return"https://my.izettle.com/apps/api-keys?name=Shopware%20integration&scopes="+["READ:PURCHASE","READ:FINANCE","READ:USERINFO","READ:PRODUCT","WRITE:PRODUCT"].join("%20")}};const Ze=Shopware.Classes.ApiService;var He=class extends Ze{constructor(e,a,n="paypal/pos"){super(e,a,n),this.basicConfig={timeout:3e5}}startCompleteSync(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/sync/${e}`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}startProductSync(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/sync/${e}/products`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}startInventorySync(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/sync/${e}/inventory`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}startImageSync(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/sync/${e}/images`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}startLogCleanup(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/log/cleanup/${e}`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}abortSync(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/sync/abort/${e}`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}resetSync(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/sync/reset/${e}`,null,{...this.basicConfig,headers:a}).then(e=>Ze.handleResponse(e))}getProductLog(e,a=1,n=10){const t=this.getBasicHeaders();return this.httpClient.get(`${this.getApiBasePath()}/product-log/${e}`,{...this.basicConfig,headers:t,params:{page:a,limit:n}}).then(e=>Ze.handleResponse(e))}};const je=Shopware.Classes.ApiService;var We=class extends je{constructor(e,a,n="paypal/pos"){super(e,a,n)}registerWebhook(e){const a=this.getBasicHeaders();return this.httpClient.post(`_action/${this.getApiBasePath()}/webhook/registration/${e}`,{},{headers:a}).then(e=>je.handleResponse(e))}unregisterWebhook(e){const a=this.getBasicHeaders();return this.httpClient.delete(`_action/${this.getApiBasePath()}/webhook/registration/${e}`,{},{headers:a}).then(e=>je.handleResponse(e))}};const Ke=Shopware.Classes.ApiService;var Ge=class extends Ke{constructor(e,a,n="paypal"){super(e,a,n)}getPaymentDetails(e,a){const n=`${this.getApiBasePath()}/payment-details/${e}/${a}`;return this.httpClient.get(n,{headers:this.getBasicHeaders()}).then(e=>Ke.handleResponse(e))}capturePayment(e,a,n,t,s,i){const l=`_action/${this.getApiBasePath()}/capture-payment/${a}/${n}/${e}`;return this.httpClient.post(l,{captureAmount:t,currency:s,captureIsFinal:i},{headers:this.getBasicHeaders()}).then(e=>Ke.handleResponse(e))}refundPayment(e,a,n,t,s,i,l,o){const r=`_action/${this.getApiBasePath()}/refund-payment/${a}/${n}/${e}`;return this.httpClient.post(r,{refundAmount:t,currency:s,description:i,reason:l,refundInvoiceNumber:o},{headers:this.getBasicHeaders()}).then(e=>Ke.handleResponse(e))}voidPayment(e,a,n){const t=`_action/${this.getApiBasePath()}/void-payment/${a}/${n}/${e}`;return this.httpClient.post(t,{},{headers:this.getBasicHeaders()}).then(e=>Ke.handleResponse(e))}};const Ye=Shopware.Classes.ApiService;var Je=class extends Ye{constructor(e,a,n="paypal"){super(e,a,n)}setDefaultPaymentForSalesChannel(e=null){const a=`_action/${this.getApiBasePath()}/saleschannel-default`;return this.httpClient.post(a,{salesChannelId:e},{headers:this.getBasicHeaders()}).then(e=>Ye.handleResponse(e))}};const{Application:Qe}=Shopware,Xe=Qe.getContainer("init");Qe.addServiceProvider("SwagPayPalWebhookRegisterService",e=>new Ve(Xe.httpClient,e.loginService)),Qe.addServiceProvider("SwagPayPalApiCredentialsService",e=>new Me(Xe.httpClient,e.loginService)),Qe.addServiceProvider("SwagPayPalPosSettingApiService",e=>new qe(Xe.httpClient,e.loginService)),Qe.addServiceProvider("SwagPayPalPosApiService",e=>new He(Xe.httpClient,e.loginService)),Qe.addServiceProvider("SwagPayPalPosWebhookRegisterService",e=>new We(Xe.httpClient,e.loginService)),Qe.addServiceProvider("SwagPayPalPaymentService",e=>new Ge(Xe.httpClient,e.loginService)),Qe.addServiceProvider("SwagPaypalPaymentMethodServiceService",e=>new Je(Xe.httpClient,e.loginService));var ea=n("ZLee"),aa=n("CEzf");Shopware.Locale.extend("de-DE",ea),Shopware.Locale.extend("en-GB",aa);var na=(()=>{const e=n("nYtA");return e.keys().reduce((a,n)=>{const t={name:n.split(".")[1].split("/")[1],functional:!0,render(a,t){const s=t.data;return a("span",{class:[s.staticClass,s.class],style:s.style,attrs:s.attrs,on:s.on,domProps:{innerHTML:e(n)}})}};return a.push(t),a},[])})();const{Component:ta}=Shopware;na.map(e=>ta.register(e.name,e));var sa=n("QZV2"),ia=n.n(sa);n("odUu");const{Component:la}=Shopware;la.register("swag-paypal-pos-status",{template:ia.a,props:{title:{type:String,required:!1},status:{type:String,required:!0},disabled:{type:Boolean,required:!1,default:!1},disabledText:{type:String,required:!1,default:""},icon:{type:String,required:!0},iconAnimated:{type:Boolean,required:!1,default:!1},subIcon:{type:String,required:!1},showSubStatus:{type:Boolean,required:!1,default:!1},isLoading:{type:Boolean,required:!0},variant:{type:String,default:"info",validValues:["info","warning","error","success"],validator:e=>["info","warning","error","success"].includes(e)},subVariant:{type:String,default:"info",validValues:["info","warning","error","success"],validator:e=>["info","warning","error","success"].includes(e)}},computed:{statusClasses(){return{"swag-paypal-pos-status":!0,["swag-paypal-pos-status--"+this.variant]:!0,"swag-paypal-pos-status--disabled":this.disabled}},iconClasses(){return{"swag-paypal-pos-status__icon":!0,"swag-paypal-pos-status__icon-animated":this.iconAnimated}},subIconClasses(){return["swag-paypal-pos-status__subicon","swag-paypal-pos-status--"+this.subVariant]},showSubIcon(){return null!==this.subIcon&&void 0!==this.subIcon&&this.subIcon!==this.icon}}});var oa=n("+B3i"),ra=n.n(oa);n("auMI");const{Component:ca}=Shopware;ca.register("swag-paypal-pos-account",{template:ra.a,inject:["SwagPayPalPosSettingApiService","repositoryFactory"],props:{salesChannel:{type:Object,require:!1},lastRun:{type:Object,require:!1}},data:()=>({isLoading:!1,isError:!1,merchantInfo:null}),computed:{accountName(){return this.isError?this.$tc("swag-paypal-pos.account.errorName"):this.merchantInfo?this.merchantInfo.name:this.$tc("swag-paypal-pos.account.loadingName")},accountEmail(){return this.isError?this.$tc("swag-paypal-pos.account.errorEmail"):this.merchantInfo?this.merchantInfo.contactEmail:this.$tc("swag-paypal-pos.account.loadingEmail")},connectionStatusText(){return this.isError?this.$tc("swag-paypal-pos.account.noConnectionStatus"):this.$tc("swag-paypal-pos.account.connectedStatus")},connectionStatusVariant(){return this.isError?"danger":"success"},runRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel_run")}},created(){this.createdComponent()},watch:{salesChannel(){this.loadMerchantData()}},methods:{createdComponent(){this.loadMerchantData()},loadMerchantData(){return this.isError=!1,this.isLoading=!0,null===this.salesChannel?Promise.resolve():this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel).then(({merchantInformation:e})=>{this.merchantInfo=e,this.isError=!1}).catch(()=>{this.merchantInfo=null,this.isError=!0}).finally(()=>{this.isLoading=!1})}}});var pa=n("zzyi"),da=n.n(pa);const{Component:ua}=Shopware;ua.register("swag-paypal-pos-status-view",{template:da.a,props:{lastFinishedRun:{type:Object,required:!1},lastCompleteRun:{type:Object,required:!1},isLoading:{type:Boolean,default:!1},isSyncing:{type:Boolean,default:!1},salesChannel:{type:Object,required:!1},syncErrors:{type:Array,required:!1}},data:()=>({statusErrorLevel:null,statusCompleteErrorLevel:null,iconConfig:{syncing:"default-arrow-360-full",warning:"default-badge-warning",error:"default-basic-x-line",success:"default-basic-checkmark-line",noRunYet:"default-action-more-horizontal"}}),computed:{status(){return this.isSyncing?"syncing":this.noRunYet?"noRunYet":this.statusErrorLevel},statusVariant(){return this.isSyncing||this.noRunYet?"info":this.statusErrorLevel},statusIcon(){return this.iconConfig[this.status]||"default-badge-info"},statusIconComplete(){return this.iconConfig[this.statusCompleteErrorLevel]},noRunYet(){return null===this.salesChannel||null===this.salesChannel.id||null===this.lastFinishedRun},incompleteLastRun(){return null!==this.salesChannel&&null!==this.salesChannel.id&&null!==this.lastFinishedRun&&null!==this.lastCompleteRun&&this.lastFinishedRun.id!==this.lastCompleteRun.id},statusTitle(){let e=this.$tc("swag-paypal-pos.detail.overview.status.message."+this.status);if(this.incompleteLastRun){const a=this.$tc("swag-paypal-pos.detail.overview.status.task."+this.lastFinishedRun.task);this.isSyncing||(e+=` (${a})`)}return this.lastFinishedRun&&this.lastFinishedRun.abortedByUser&&(e=this.$tc("swag-paypal-pos.detail.overview.status.message.aborted")),e},disabled(){return null!==this.salesChannel&&null!==this.salesChannel.id&&!1===this.salesChannel.active}},watch:{lastFinishedRun:{handler(){this.statusErrorLevel=this.getHighestLevel(this.lastFinishedRun)},immediate:!0},lastCompleteRun:{handler(){this.statusCompleteErrorLevel=this.getHighestLevel(this.lastCompleteRun)},immediate:!0}},methods:{getHighestLevel(e){if(null===e)return null;if(e.abortedByUser)return"info";const a=Math.max(...e.logs.map(e=>e.level));return a>=400?"error":a>=300?"warning":"success"}}});var ga=n("k1Kq"),ha=n.n(ga);n("zrgI");const{Component:wa}=Shopware,_a=Shopware.Utils;wa.register("swag-paypal-pos-boolean-radio",{template:ha.a,model:{prop:"value",event:"change"},props:{value:{type:Boolean,required:!1,default:!0},optionTrue:{type:Object,required:!0,validator:e=>e.hasOwnProperty("name")},optionFalse:{type:Object,required:!0,validator:e=>e.hasOwnProperty("name")}},data:()=>({inputId:_a.createId()}),computed:{options(){return[{value:!0,...this.optionTrue},{value:!1,...this.optionFalse}]},castedValue:{get(){return this.value},set(e){this.$emit("change",e)}},name(){return"swag-paypal-pos-boolean-radio-"+this.inputId}}});var ya=n("Uf5m"),ma=n.n(ya);n("j5/r");const{Component:ba,Context:fa}=Shopware,{Criteria:Sa}=Shopware.Data;ba.register("swag-paypal-pos-detail-logs",{template:ma.a,inject:["SwagPayPalPosApiService","repositoryFactory"],mixins:["notification","swag-paypal-pos-log-label","listing"],props:{runId:{type:String,required:!0}},data:()=>({logs:[],limit:10,sortBy:"createdAt",sortDirection:"DESC",loadingLogs:!1,isLoading:!1,disableRouteParams:!0}),computed:{logRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel_run_log")},columns:()=>[{property:"date",dataIndex:"createdAt",label:"swag-paypal-pos.detail.syncedProducts.columns.date",width:"140px",sortable:!0},{property:"state",dataIndex:"level",label:"swag-paypal-pos.detail.syncedProducts.columns.state",width:"120px",sortable:!0},{property:"message",dataIndex:"message",label:"swag-paypal-pos.detail.logs.columnLastSync",sortable:!0}]},methods:{getListCriteria(){const e=this.getListingParams(),a=new Sa(this.page,this.limit);return a.addFilter(Sa.equals("runId",this.runId)),a.addAssociation("run"),a.addSorting(Sa.sort(e.sortBy,e.sortDirection,e.naturalSorting)),a.addSorting(Sa.sort("level","DESC")),a.addSorting(Sa.sort("createdAt","DESC")),a},getList(){return this.loadingLogs=!0,this.logRepository.search(this.getListCriteria(),fa.api).then(e=>{this.logs=e,this.total=e.total,this.page=e.criteria.page,this.limit=e.criteria.limit,this.loadingLogs=!1})},getLabelVariantForItem(e){return e.run&&e.run.abortedByUser?"info":this.getLabelVariant(e.level)},getLabelForItem(e){return e.run&&e.run.abortedByUser?"swag-paypal-pos.detail.logs.states.aborted":this.getLabel(e.level)}}});var va=n("szT/"),Ca=n.n(va);n("hgvj");const{Component:ka}=Shopware;ka.register("swag-paypal-pos-getting-started",{template:Ca.a});var Pa=n("hXsm"),xa=n.n(Pa);n("vcRu");const{Component:Ia}=Shopware;Ia.register("swag-paypal-pos-continue-setup",{template:xa.a,methods:{onContinueSetup(){this.$router.push({name:"swag.paypal.pos.wizard.customization",params:{id:this.$route.params.id}})}}});n("i1vQ");const{Component:$a}=Shopware;$a.override("sw-sales-channel-menu",{methods:{createMenuTree(){this.$super("createMenuTree");const e=[];this.salesChannels.forEach(a=>{"1ce0868f406d47d98cfe4b281e62f099"===a.typeId&&e.push(a.id)}),this.menuItems.forEach(a=>{e.includes(a.id)&&(a.path="swag.paypal.pos.detail")})}}});const{Component:La}=Shopware;La.override("sw-sales-channel-modal",{methods:{onAddChannel(e){if(this.isPayPalPosSalesChannel(e))return this.onCloseModal(),void this.$router.push({name:"swag.paypal.pos.wizard"});this.$super("onAddChannel",e)},isPayPalPosSalesChannel:e=>"1ce0868f406d47d98cfe4b281e62f099"===e}});var Ta=n("xNo3"),Aa=n.n(Ta);n("dChU");const{Component:za}=Shopware,{Criteria:Fa}=Shopware.Data;za.register("swag-paypal-pos",{template:Aa.a,inject:["salesChannelService","repositoryFactory"],mixins:["placeholder"],data:()=>({isLoading:!1,previousApiKey:null,salesChannel:{},lastRun:null,lastCompleteRun:null,cloneSalesChannelId:null,buttonConfig:[]}),metaInfo(){return{title:this.title}},computed:{title(){return[this.$tc("global.sw-admin-menu.textShopwareAdmin"),this.$tc("sw-sales-channel.general.titleMenuItems"),this.$tc("swag-paypal-pos.general.moduleTitle")].reverse().join(" | ")},paypalPosSalesChannelRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel")},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},runRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel_run")},salesChannelCriteria(){const e=new Fa;return e.addAssociation("paypalPosSalesChannel"),e.addAssociation("countries"),e.addAssociation("currencies"),e.addAssociation("domains"),e.addAssociation("languages"),e}},watch:{"$route.params.id"(){this.loadSalesChannel()}},created(){this.createdComponent()},methods:{createdComponent(){this.loadSalesChannel()},loadSalesChannel(){return this.$route.params.id?(this.salesChannel&&(this.salesChannel=null),this.isLoading=!0,this.salesChannelRepository.get(this.$route.params.id,Shopware.Context.api,this.salesChannelCriteria).then(e=>{this.salesChannel=e,this.previousApiKey=e.extensions.paypalPosSalesChannel.apiKey,this.updateRun(),this.isLoading=!1})):Promise.resolve()},updateCloneSalesChannel(e){this.cloneSalesChannelId=e},updateButtons(e){this.buttonConfig=e},onButtonClick(e){"string"!=typeof e?"function"==typeof e&&e.call():this.redirect(e)},updateRun(){return setTimeout(this.updateRun,2e4),this.loadLastRun()},loadLastRun(e=!1){const a=new Fa(1,1);return a.addFilter(Fa.equals("salesChannelId",this.salesChannel.id)),a.addFilter(Fa.not("AND",[Fa.equals("finishedAt",null)])),a.addSorting(Fa.sort("createdAt","DESC")),e?a.addFilter(Fa.equals("task","complete")):a.addAssociation("logs"),this.runRepository.search(a,Shopware.Context.api).then(a=>{if(e)return this.lastCompleteRun=a.first(),void this.$forceUpdate();this.lastRun=a.first(),null!==this.lastRun&&"complete"!==this.lastRun.task?this.loadLastRun(!0):this.lastCompleteRun=this.lastRun,this.$forceUpdate()})}}});var Ea=n("UMdY"),Da=n.n(Ea);n("gisM");const{Component:Ba}=Shopware;Ba.register("swag-paypal-pos-detail-synced-products",{template:Da.a,inject:["SwagPayPalPosApiService"],mixins:["swag-paypal-pos-log-label","listing"],props:{salesChannel:{type:Object,required:!0}},data(){return{products:[],limit:10,isLoading:!1,actions:[{label:"swag-paypal-pos.detail.syncedProducts.actions.productDetails",callback:this.onProductDetails}],columns:[{property:"name",label:"swag-paypal-pos.detail.syncedProducts.columns.name",sortable:!1},{property:"state",label:"swag-paypal-pos.detail.syncedProducts.columns.state",sortable:!1},{property:"date",label:"swag-paypal-pos.detail.syncedProducts.columns.date",sortable:!1}]}},created(){this.createdComponent()},methods:{createdComponent(){this.$emit("buttons-update",[]),this.getList()},getList(){if(null===this.salesChannel||null===this.salesChannel.id)return Promise.resolve();this.isLoading=!0;const e=this.getListingParams();return this.SwagPayPalPosApiService.getProductLog(this.salesChannel.id,e.page,e.limit).then(e=>{this.products=Object.values(e.elements),this.total=e.total,this.isLoading=!1})},onProductDetails(e){this.$router.push({name:"sw.product.detail.base",params:{id:e.id}})},hasSync:e=>e.extensions.paypalPosLog.length||e.extensions.paypalPosSync.length,getSyncDate(e){return this.hasSync(e)?e.extensions.paypalPosLog[0]?e.extensions.paypalPosLog[0].run.updatedAt||e.extensions.paypalPosLog[0].createdAt:e.extensions.paypalPosSync[0].updatedAt||e.extensions.paypalPosSync[0].createdAt:null},getLevel:e=>e.extensions.paypalPosLog[0]?e.extensions.paypalPosLog[0].level:200}});var Ra=n("Jc0m"),Na=n.n(Ra);n("lu4H");const{Component:Va}=Shopware,{Criteria:Oa}=Shopware.Data;Va.register("swag-paypal-pos-detail-overview",{template:Na.a,inject:["SwagPayPalPosApiService","salesChannelService","repositoryFactory"],mixins:["placeholder"],props:{salesChannel:{type:Object,required:!1},lastRun:{type:Object,required:!1},lastCompleteRun:{type:Object,required:!1}},data:()=>({isSyncing:!1,syncErrors:null,syncingRunId:null,statusErrorLevel:null,isLoading:!1}),computed:{runRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel_run")}},watch:{"salesChannel.id"(){this.checkForSync()},lastRun(){this.$forceUpdate()}},created(){this.createdComponent()},mounted(){this.mountedComponent()},methods:{createdComponent(){this.checkForSync()},mountedComponent(){this.updateButtons()},forceUpdate(){this.$forceUpdate()},startSync(e){this.syncErrors=null,this.isSyncing=!0,this.updateButtons(!0),e(this.salesChannel.id).then(e=>{this.syncingRunId=e.runId,this.updateSync()}).catch(e=>{this.syncErrors=e.response.data.errors,this.$emit("run-update"),this.isSyncing=!1,this.updateButtons()})},updateSync(){null!==this.syncingRunId&&this.runRepository.get(this.syncingRunId,Shopware.Context.api).then(e=>{null===e||null!==e.finishedAt?(this.syncingRunId=null,this.$emit("run-update"),this.isSyncing=!1,this.updateButtons()):setTimeout(this.updateSync,1500)})},onStartSync(){this.startSync(this.SwagPayPalPosApiService.startCompleteSync.bind(this.SwagPayPalPosApiService))},onStartProductSync(){this.startSync(this.SwagPayPalPosApiService.startProductSync.bind(this.SwagPayPalPosApiService))},onStartImageSync(){this.startSync(this.SwagPayPalPosApiService.startImageSync.bind(this.SwagPayPalPosApiService))},onStartInventorySync(){this.startSync(this.SwagPayPalPosApiService.startInventorySync.bind(this.SwagPayPalPosApiService))},onSyncAbort(){null!==this.syncingRunId&&this.SwagPayPalPosApiService.abortSync(this.syncingRunId).then(()=>{this.updateSync()})},checkForSync(){if(null===this.salesChannel||null===this.salesChannel.id)return;const e=new Oa(1,1);e.addFilter(Oa.equals("salesChannelId",this.salesChannel.id)),e.addFilter(Oa.equals("finishedAt",null)),e.addSorting(Oa.sort("createdAt","DESC")),this.runRepository.search(e,Shopware.Context.api).then(e=>{null!==e.first()&&(this.isSyncing=!0,this.syncingRunId=e.first().id,this.updateSync())})},updateButtons(e=!1){const a=[{key:"sync",label:this.$tc("swag-paypal-pos.detail.overview.buttonSync"),variant:"primary",action:this.onStartSync,disabled:!(this.salesChannel&&this.salesChannel.active),isLoading:this.isSyncing}];e&&a.unshift({key:"abortSync",label:this.$tc("swag-paypal-pos.detail.overview.buttonSyncAbort"),action:this.onSyncAbort,disabled:!(this.salesChannel&&this.salesChannel.active)}),this.$emit("buttons-update",a)}}});var Ma=n("z8JU"),Ua=n.n(Ma);n("cNsE");const{Component:qa,Context:Za,State:Ha}=Shopware,{mapPropertyErrors:ja}=qa.getComponentHelper(),{ShopwareError:Wa}=Shopware.Classes;qa.register("swag-paypal-pos-detail-settings",{template:Ua.a,inject:["SwagPayPalPosApiService","SwagPayPalPosSettingApiService","SwagPayPalPosWebhookRegisterService","salesChannelService","repositoryFactory"],mixins:["swag-paypal-pos-catch-error","placeholder","notification"],props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1}},data(){return{isLoading:!1,showDeleteModal:!1,showResetModal:!1,isSaveSuccessful:!1,isTestingCredentials:!1,isTestCredentialsSuccessful:!1,apiKeyUrl:this.SwagPayPalPosSettingApiService.generateApiUrl(),previousApiKey:this.salesChannel.extensions.paypalPosSalesChannel.apiKey}},computed:{...ja("salesChannel",["name"]),...ja("swagPaypalPosSalesChannel",["mediaDomain"]),salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},optionSyncPrices(){return{name:this.$tc("swag-paypal-pos.wizard.syncPrices.optionTrueLabel"),description:this.$tc("swag-paypal-pos.wizard.syncPrices.optionTrueDescription")}},optionNotSyncPrices(){return{name:this.$tc("swag-paypal-pos.wizard.syncPrices.optionFalseLabel"),description:this.$tc("swag-paypal-pos.wizard.syncPrices.optionFalseDescription")}},optionReplace(){return{name:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionReplaceLabel"),description:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionReplaceDescription")}},optionAdd(){return{name:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionAddLabel"),description:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionAddDescription")}},swagPaypalPosSalesChannel(){return this.salesChannel.extensions.paypalPosSalesChannel}},mounted(){this.mountedComponent()},methods:{mountedComponent(){this.updateButtons()},forceUpdate(){this.$forceUpdate()},onSave(){return this.isLoading=!0,this.isSaveSuccessful=!1,this.updateButtons(),this.swagPaypalPosSalesChannel.apiKey===this.previousApiKey?this.save():this.SwagPayPalPosSettingApiService.validateApiCredentials(this.swagPaypalPosSalesChannel.apiKey,this.salesChannel.id).then(()=>this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel)).then(this.save).catch(e=>{throw this.catchAuthenticationError(e),this.isLoading=!1,this.updateButtons(),e})},save(){return this.SwagPayPalPosWebhookRegisterService.registerWebhook(this.salesChannel.id).catch(this.catchError.bind(this,"swag-paypal-pos.messageWebhookRegisterError")),this.salesChannelRepository.save(this.salesChannel,Za.api).then(()=>{this.isLoading=!1,this.isSaveSuccessful=!0,this.updateButtons(),this.$emit("load-sales-channel"),this.$root.$emit("sales-channel-change"),null!==this.cloneSalesChannelId&&this.SwagPayPalPosSettingApiService.cloneProductVisibility(this.cloneSalesChannelId,this.salesChannel.id).catch(this.catchError.bind(this,"swag-paypal-pos.messageCloneError"))}).catch(()=>{this.isLoading=!1,this.updateButtons(),this.createNotificationError({message:this.$tc("sw-sales-channel.detail.messageSaveError",0,{name:this.salesChannel.name||this.placeholder(this.salesChannel,"name")})})}).finally(()=>{if(null===this.swagPaypalPosSalesChannel.mediaDomain){const e=`swag_paypal_pos_sales_channel.${this.swagPaypalPosSalesChannel.id}.mediaDomain`,a=new Wa({code:"INVALID_URL"});Ha.commit("error/addApiError",{expression:e,error:a})}})},testCredentials(){const e=this.swagPaypalPosSalesChannel.apiKey;this.isTestingCredentials=!0,this.isTestCredentialsSuccessful=!1,this.SwagPayPalPosSettingApiService.validateApiCredentials(e).then(e=>{const a=e.credentialsValid;this.isTestingCredentials=!1,this.isTestCredentialsSuccessful=a}).catch(e=>{this.catchAuthenticationError(e),this.isTestingCredentials=!1})},catchAuthenticationError(e){this.catchError("swag-paypal-pos.authentication.messageTestError",e),this.isTestingCredentials=!1,this.isTestCredentialsSuccessful=!1},updateButtons(){const e=[{key:"save",label:this.$tc("swag-paypal-pos.detail.save"),variant:"primary",action:this.onSave,disabled:!1,isLoading:this.isLoading}];this.$emit("buttons-update",e)},onConfirmDelete(){this.showDeleteModal=!1,this.$nextTick(()=>{this.deleteSalesChannel(this.salesChannel.id),this.$router.push({name:"sw.dashboard.index"})})},deleteSalesChannel(e){return this.SwagPayPalPosWebhookRegisterService.unregisterWebhook(e).finally(()=>this.salesChannelRepository.delete(e,Shopware.Context.api).then(()=>{this.$root.$emit("sales-channel-change")}))},onConfirmReset(){this.showResetModal=!1,this.$nextTick(()=>{this.SwagPayPalPosApiService.resetSync(this.salesChannel.id).then(()=>{this.$router.push({name:"swag.paypal.pos.detail.overview",params:{id:this.salesChannel.id}})})})}}});var Ka=n("Okln"),Ga=n.n(Ka);n("opui");const{Component:Ya,Context:Ja}=Shopware,{Criteria:Qa}=Shopware.Data;Ya.register("swag-paypal-pos-detail-runs",{template:Ga.a,inject:["SwagPayPalPosApiService","repositoryFactory"],mixins:["swag-paypal-pos-catch-error","notification","listing"],props:{salesChannel:{type:Object,required:!1}},data:()=>({runs:[],limit:10,sortBy:"finishedAt",sortDirection:"DESC",isLoading:!1,isCleaningLog:!1,showModal:!1,currentRunId:""}),computed:{runRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel_run")},columns:()=>[{property:"task",dataIndex:"task",label:"swag-paypal-pos.detail.runs.columns.task",sortable:!0},{property:"state",dataIndex:"logs.level",label:"swag-paypal-pos.detail.runs.columns.state",sortable:!0},{property:"date",dataIndex:"finishedAt",label:"swag-paypal-pos.detail.runs.columns.date",sortable:!0}]},created(){this.createdComponent()},methods:{createdComponent(){this.$emit("buttons-update",[])},getListCriteria(){const e=new Qa(this.page,this.limit);e.addFilter(Qa.equals("salesChannelId",this.salesChannel.id)),e.addFilter(Qa.not("AND",[Qa.equals("finishedAt",null)])),e.addAssociation("logs"),e.getAssociation("logs").limit=1,e.getAssociation("logs").addSorting(Qa.sort("level","DESC"));const a=this.getListingParams();return e.addSorting(Qa.sort(a.sortBy,a.sortDirection,a.naturalSorting)),e.addSorting(Qa.sort("finishedAt","DESC")),e},getList(){return null===this.salesChannel||null===this.salesChannel.id?Promise.resolve():(this.isLoading=!0,this.runRepository.search(this.getListCriteria(),Ja.api).then(e=>{this.runs=e,this.total=e.total,this.page=e.criteria.page,this.limit=e.criteria.limit,this.isLoading=!1}))},onShowModal(e){this.currentRunId=e,this.showModal=!0},onCloseModal(){this.showModal=!1,this.currentRunId=""},onClearLogs(){return this.isLoading=!0,this.SwagPayPalPosApiService.startLogCleanup(this.salesChannel.id).then(()=>(this.$emit("run-update"),this.getList())).catch(e=>{this.catchError(null,e),this.getList()})},getLabelVariant:e=>e.abortedByUser?"info":e.logs.length<=0?"success":e.logs[0].level>=400?"danger":e.logs[0].level>=300?"warning":e.logs[0].level>200?"info":"success",getLabel:e=>e.abortedByUser?"swag-paypal-pos.detail.runs.states.aborted":e.logs.length<=0?"swag-paypal-pos.detail.runs.states.successful":e.logs[0].level>200?"swag-paypal-pos.detail.runs.states.withWarnings":"swag-paypal-pos.detail.runs.states.successful"}});var Xa=n("O/Fb"),en=n.n(Xa);n("CA8G");const{Component:an,Context:nn}=Shopware,{Criteria:tn}=Shopware.Data;an.extend("swag-paypal-pos-wizard","sw-first-run-wizard-modal",{template:en.a,inject:["SwagPayPalPosApiService","SwagPayPalPosSettingApiService","SwagPayPalPosWebhookRegisterService","salesChannelService","repositoryFactory"],mixins:["swag-paypal-pos-catch-error","notification"],data:()=>({showModal:!0,isLoading:!1,salesChannel:{},cloneSalesChannelId:null,stepperPages:["connection","connectionSuccess","connectionDisconnect","customization","productSelection","syncLibrary","syncPrices","finish"],stepper:{},currentStep:{}}),metaInfo(){return{title:this.wizardTitle}},computed:{displayStepperPages(){return this.stepperPages.filter(e=>"connectionDisconnect"!==e)},stepInitialItemVariants(){const e=this.stepperPages.length,{navigationIndex:a}=this.currentStep,n=[];for(let t=1;t<=e;t+=1)t<a?n.push("success"):t===a?n.push("info"):n.push("disabled");return n},paypalPosSalesChannelRepository(){return this.repositoryFactory.create("swag_paypal_pos_sales_channel")},salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},salesChannelCriteria:()=>(new tn).addAssociation("paypalPosSalesChannel").addAssociation("countries").addAssociation("currencies").addAssociation("domains").addAssociation("languages"),wizardTitle(){return[this.$tc("global.sw-admin-menu.textShopwareAdmin"),this.$tc("swag-paypal-pos.general.moduleTitle"),this.title].reverse().join(" | ")}},watch:{$route(e){const a=e.name.replace("swag.paypal.pos.wizard.","");this.currentStep=this.stepper[a]}},mounted(){this.mountedComponent()},methods:{createdComponent(){this.$super("createdComponent"),this.generateStepper();this.$route.params.id?this.loadSalesChannel():this.createNewSalesChannel()},mountedComponent(){const e=this.$route.name.replace("swag.paypal.pos.wizard.","");this.currentStep=this.stepper[e]},generateStepper(){let e=1;this.stepper=this.stepperPages.reduce((a,n)=>("connectionDisconnect"===n&&(e-=1),a[n]={name:"swag.paypal.pos.wizard."+n,variant:"large",navigationIndex:e},1===e&&(this.currentStep=a[n]),e+=1,a),{})},onCloseModal(){this.salesChannel._isNew||!this.$route.params.id&&!this.salesChannel.id?this.routeToDashboard():this.routeToDetailOverview()},onFinishWizard(){this.routeToDetailOverview(!0)},routeToDashboard(){this.showModal=!1,this.$nextTick(()=>{this.$router.push({name:"sw.dashboard.index"})})},routeToDetailOverview(e=!1){this.showModal=!1,this.save(e).then(()=>{e&&this.SwagPayPalPosApiService.startCompleteSync(this.salesChannel.id),this.$router.push({name:"swag.paypal.pos.detail.overview",params:{id:this.salesChannel.id}})})},save(e=!1,a=!1){return e&&(this.salesChannel.active=!0),this.salesChannelRepository.save(this.salesChannel,nn.api).then(async()=>{this.isLoading=!1,this.isSaveSuccessful=!0,this.isNewEntity=!1,this.$root.$emit("sales-channel-change"),await this.loadSalesChannel(),this.cloneProductVisibility(),this.registerWebhook(a)}).catch(()=>{this.isLoading=!1,this.createNotificationError({message:this.$tc("sw-sales-channel.detail.messageSaveError",0,{name:this.salesChannel.name||this.placeholder(this.salesChannel,"name")})})})},registerWebhook(e=!1){const a=this.SwagPayPalPosWebhookRegisterService.registerWebhook(this.salesChannel.id);return e?a:a.catch(this.catchError.bind(this,"swag-paypal-pos.messageWebhookRegisterError"))},cloneProductVisibility(){null!==this.cloneSalesChannelId&&this.SwagPayPalPosSettingApiService.cloneProductVisibility(this.cloneSalesChannelId,this.salesChannel.id).catch(e=>{e.response.data&&e.response.data.errors&&this.createNotificationError({message:this.$tc("swag-paypal-pos.messageCloneError")})})},createNewSalesChannel(){nn.api.languageId!==nn.api.systemLanguageId&&(nn.api.languageId=nn.api.systemLanguageId),this.previousApiKey=null,this.salesChannel=this.salesChannelRepository.create(nn.api),this.salesChannel.typeId="1ce0868f406d47d98cfe4b281e62f099",this.salesChannel.name=this.$tc("swag-paypal-pos.wizard.salesChannelPrototypeName"),this.salesChannel.active=!1,this.salesChannel.extensions.paypalPosSalesChannel=this.paypalPosSalesChannelRepository.create(nn.api),Object.assign(this.salesChannel.extensions.paypalPosSalesChannel,{mediaDomain:"",apiKey:"",imageDomain:"",productStreamId:null,syncPrices:!0,replace:!1}),this.salesChannelService.generateKey().then(e=>{this.salesChannel.accessKey=e.accessKey}).catch(()=>{this.createNotificationError({message:this.$tc("sw-sales-channel.detail.messageAPIError")})})},loadSalesChannel(){const e=this.$route.params.id||this.salesChannel.id;return e?(this.isLoading=!0,this.salesChannelRepository.get(e,Shopware.Context.api,this.salesChannelCriteria).then(e=>{this.salesChannel=e,this.previousApiKey=e.extensions.paypalPosSalesChannel.apiKey,this.isLoading=!1})):new Promise},updateCloneSalesChannel(e){this.cloneSalesChannelId=e},toggleLoading(e){this.isLoading=e}}});var sn=n("ZkYA"),ln=n.n(sn);n("BHCF");const{Component:on}=Shopware;on.register("swag-paypal-pos-wizard-connection",{template:ln.a,inject:["SwagPayPalPosSettingApiService"],mixins:["notification","swag-paypal-pos-catch-error"],props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},isLoading:{type:Boolean,required:!1,default:()=>!1}},data(){return{isConnecting:!1,apiKeyUrl:this.SwagPayPalPosSettingApiService.generateApiUrl()}},watch:{"salesChannel.extensions.paypalPosSalesChannel.apiKey"(e){e&&this.updateButtons()}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle()},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.connection.modalTitle"))},updateButtons(){const e=[{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.routeToConnectionSuccess,disabled:this.isLoading||!this.salesChannel.extensions.paypalPosSalesChannel.apiKey}];this.$emit("buttons-update",e)},routeToConnectionSuccess(){this.toggleLoadingState(!0);const e=this.salesChannel.extensions.paypalPosSalesChannel.apiKey;this.SwagPayPalPosSettingApiService.validateApiCredentials(e).then(e=>{!0===e.credentialsValid&&(this.toggleLoadingState(!1),this.$router.push({name:"swag.paypal.pos.wizard.connectionSuccess"}))}).catch(this.catchError.bind(this,null)).finally(()=>{this.toggleLoadingState(!1)})},forceUpdate(){this.$forceUpdate(),this.updateButtons()},toggleLoadingState(e){this.isConnecting=e,this.$emit("toggle-loading",e)}}});var rn=n("OpH4"),cn=n.n(rn);n("kTpT");const{Component:pn}=Shopware;pn.register("swag-paypal-pos-wizard-connection-success",{template:cn.a,inject:["repositoryFactory","SwagPayPalPosSettingApiService"],mixin:["placeholder"],props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},saveSalesChannel:{type:Function,required:!0}},data:()=>({iZettleData:null,isFetchingInformation:!0}),computed:{iZettleUser(){if(this.isFetchingInformation){const e=this.$tc("swag-paypal-pos.wizard.connectionSuccess.fakeFirstName"),a=this.$tc("swag-paypal-pos.wizard.connectionSuccess.fakeLastName");return{firstName:e,lastName:a,fullName:`${e} ${a}`,mail:this.$tc("swag-paypal-pos.wizard.connectionSuccess.fakeMail")}}const e=this.iZettleData.merchantInformation.name.split(" ");return{firstName:e[0],lastName:e[e.length-1],fullName:this.iZettleData.merchantInformation.name,mail:this.iZettleData.merchantInformation.contactEmail}}},created(){this.createdComponent()},methods:{createdComponent(){return this.isFetchingInformation=!0,this.updateButtons(),this.setTitle(),this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel).then(e=>(this.iZettleData=e,this.saveSalesChannel(!1,!0))).finally(()=>{this.isFetchingInformation=!1,this.updateButtons()})},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.connectionSuccess.modalTitle"))},updateButtons(){const e=[{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.routeToCustomization,disabled:this.isFetchingInformation}];this.$emit("buttons-update",e)},routeToCustomization(){this.$router.push({name:"swag.paypal.pos.wizard.customization",params:{id:this.salesChannel.id}})},onDisconnect(){this.$router.push({name:"swag.paypal.pos.wizard.connectionDisconnect",params:{id:this.salesChannel.id}})},forceUpdate(){this.$forceUpdate(),this.updateButtons()}}});var dn=n("5z16"),un=n.n(dn);n("UgKC");const{Component:gn,Context:hn}=Shopware;gn.register("swag-paypal-pos-wizard-connection-disconnect",{template:un.a,inject:["repositoryFactory","SwagPayPalPosSettingApiService"],mixin:["placeholder","notification"],props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},saveSalesChannel:{type:Function,required:!0}},data:()=>({iZettleData:null,isFetchingInformation:!0}),computed:{salesChannelRepository(){return this.repositoryFactory.create("sales_channel")},iZettleUser(){if(this.isFetchingInformation){const e=this.$tc("swag-paypal-pos.wizard.connectionSuccess.fakeFirstName"),a=this.$tc("swag-paypal-pos.wizard.connectionSuccess.fakeLastName");return{firstName:e,lastName:a,fullName:`${e} ${a}`,mail:this.$tc("swag-paypal-pos.wizard.connectionSuccess.fakeMail")}}const e=this.iZettleData.merchantInformation.name.split(" ");return{firstName:e[0],lastName:e[e.length-1],fullName:this.iZettleData.merchantInformation.name,mail:this.iZettleData.merchantInformation.contactEmail}}},created(){this.createdComponent()},methods:{createdComponent(){this.isFetchingInformation=!0,this.updateButtons(),this.setTitle(),this.SwagPayPalPosSettingApiService.fetchInformation(this.salesChannel).then(e=>{this.iZettleData=e}).finally(()=>{this.isFetchingInformation=!1,this.updateButtons()})},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.connectionDisconnect.modalTitle"))},updateButtons(){const e=[{key:"cancel",label:this.$tc("global.default.cancel"),position:"right",action:this.routeBackToConnectionSuccess,disabled:!1},{key:"next",label:this.$tc("swag-paypal-pos.wizard.connectionDisconnect.disconnectButton"),position:"right",variant:"danger",action:this.onDisconnect,disabled:this.isFetchingInformation}];this.$emit("buttons-update",e)},routeBackToConnectionSuccess(){this.$router.push({name:"swag.paypal.pos.wizard.connectionSuccess",params:{id:this.salesChannel.id}})},onDisconnect(){this.salesChannelRepository.delete(this.salesChannel.id,hn.api).then(()=>{this.$root.$emit("sales-channel-change"),this.$emit("recreate-sales-channel"),this.forceUpdate(),this.$router.push({name:"swag.paypal.pos.wizard.connection"})}).catch(()=>{this.createNotificationError({message:this.$tc("swag-paypal-pos.wizard.connectionDisconnect.disconnectErrorMessage")})})},forceUpdate(){this.$forceUpdate(),this.updateButtons()}}});var wn=n("fn/Y"),_n=n.n(wn);n("wQQF");const{Component:yn}=Shopware;yn.register("swag-paypal-pos-wizard-customization",{template:_n.a,props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},saveSalesChannel:{type:Function,required:!0},isLoading:{type:Boolean,required:!1,default:()=>!1}},watch:{isLoading(e){e||this.updateButtons()}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle()},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.customization.modalTitle"))},updateButtons(){const e=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",action:this.routeBackToConnectionSuccess,disabled:!1},{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.routeToProductSelection,disabled:this.nextButtonDisabled()}];this.$emit("buttons-update",e)},nextButtonDisabled(){return this.isLoading||!this.salesChannel.name||!this.salesChannel.extensions.paypalPosSalesChannel.mediaDomain},routeBackToConnectionSuccess(){this.$router.push({name:"swag.paypal.pos.wizard.connectionSuccess",params:{id:this.salesChannel.id}})},routeToProductSelection(){this.$router.push({name:"swag.paypal.pos.wizard.productSelection",params:{id:this.salesChannel.id}})},forceUpdate(){this.$forceUpdate(),this.$nextTick().then(()=>{this.updateButtons()})},toggleLoadingState(e){this.isConnecting=e,this.$emit("toggle-loading",e)}}});var mn=n("rxNa"),bn=n.n(mn);const{Component:fn}=Shopware,{Criteria:Sn}=Shopware.Data;fn.register("swag-paypal-pos-wizard-product-selection",{template:bn.a,props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},saveSalesChannel:{type:Function,required:!0}},data:()=>({manualSalesChannel:!1,hasClone:!1}),computed:{localCloneSalesChannelId:{get(){return this.updateButtons(),this.cloneSalesChannelId},set(e){this.$emit("update-clone-sales-channel",e)}},salesChannelCriteria(){const e=new Sn;return e.addFilter(Sn.not("and",[Sn.equals("id",this.salesChannel.id)])),e}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle()},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.productSelection.modalTitle"))},updateButtons(){const e=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",action:this.routeBackToCustomization,disabled:!1},{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.routeToSyncLibrary,disabled:!1}];this.$emit("buttons-update",e)},routeBackToCustomization(){this.$router.push({name:"swag.paypal.pos.wizard.customization",params:{id:this.salesChannel.id}})},routeToSyncLibrary(){this.$router.push({name:"swag.paypal.pos.wizard.syncLibrary",params:{id:this.salesChannel.id}})},updateClone(){this.$emit("update-clone-sales-channel",null),this.forceUpdate()},forceUpdate(){this.$forceUpdate(),this.updateButtons()},toggleLoadingState(e){this.isConnecting=e,this.$emit("toggle-loading",e)}}});var vn=n("+TPH"),Cn=n.n(vn);n("3Q6Q");const{Component:kn}=Shopware;kn.register("swag-paypal-pos-wizard-sync-prices",{template:Cn.a,props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},saveSalesChannel:{type:Function,required:!0}},computed:{optionTrue(){return{name:this.$tc("swag-paypal-pos.wizard.syncPrices.optionTrueLabel"),description:this.$tc("swag-paypal-pos.wizard.syncPrices.optionTrueDescription")}},optionFalse(){return{name:this.$tc("swag-paypal-pos.wizard.syncPrices.optionFalseLabel"),description:this.$tc("swag-paypal-pos.wizard.syncPrices.optionFalseDescription")}}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle()},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.syncPrices.modalTitle"))},updateButtons(){const e=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",action:this.routeBackToSyncLibrary,disabled:!1},{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.routeToFinish,disabled:!1}];this.$emit("buttons-update",e)},routeBackToSyncLibrary(){this.$router.push({name:"swag.paypal.pos.wizard.syncLibrary",params:{id:this.salesChannel.id}})},routeToFinish(){this.$router.push({name:"swag.paypal.pos.wizard.finish",params:{id:this.salesChannel.id}})},forceUpdate(){this.$forceUpdate()},toggleLoadingState(e){this.isConnecting=e,this.$emit("toggle-loading",e)}}});var Pn=n("5Ejy"),xn=n.n(Pn);n("29Gb");const{Component:In}=Shopware;In.register("swag-paypal-pos-wizard-sync-library",{template:xn.a,inject:["SwagPayPalPosSettingApiService"],props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1},saveSalesChannel:{type:Function,required:!0}},data:()=>({shopwareProductsCount:0,iZettleProductsCount:0}),computed:{optionReplace(){return{name:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionReplaceLabel"),description:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionReplaceDescription")}},optionAdd(){return{name:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionAddLabel"),description:this.$tc("swag-paypal-pos.wizard.syncLibrary.optionAddDescription")}}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle(),this.fetchProductCounts()},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.syncLibrary.modalTitle"))},updateButtons(){const e=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",action:this.routeBackToProductSelection,disabled:!1},{key:"next",label:this.$tc("sw-first-run-wizard.general.buttonNext"),position:"right",variant:"primary",action:this.routeToSyncPrices,disabled:!1}];this.$emit("buttons-update",e)},routeBackToProductSelection(){this.$router.push({name:"swag.paypal.pos.wizard.productSelection",params:{id:this.salesChannel.id}})},routeToSyncPrices(){this.$router.push({name:"swag.paypal.pos.wizard.syncPrices",params:{id:this.salesChannel.id}})},forceUpdate(){this.$forceUpdate()},toggleLoadingState(e){this.isConnecting=e,this.$emit("toggle-loading",e)},fetchProductCounts(){this.toggleLoadingState(!0),this.SwagPayPalPosSettingApiService.getProductCount(this.salesChannel.id,this.cloneSalesChannelId).then(e=>{this.shopwareProductsCount=e.localCount,this.iZettleProductsCount=e.remoteCount}).finally(()=>{this.toggleLoadingState(!1)})}}});var $n=n("qfpb"),Ln=n.n($n);n("i7Bf");const{Component:Tn}=Shopware;Tn.register("swag-paypal-pos-wizard-finish",{template:Ln.a,inject:["SwagPayPalPosApiService"],props:{salesChannel:{type:Object,required:!0},cloneSalesChannelId:{type:String,required:!1}},created(){this.createdComponent()},methods:{createdComponent(){this.updateButtons(),this.setTitle(),this.triggerCompleteSync()},triggerCompleteSync(){this.SwagPayPalPosApiService.startCompleteSync(this.salesChannel.id)},setTitle(){this.$emit("frw-set-title",this.$tc("swag-paypal-pos.wizard.finish.modalTitle"))},updateButtons(){const e=[{key:"back",label:this.$tc("sw-first-run-wizard.general.buttonBack"),position:"left",action:this.routeBackToSyncPrices,disabled:!1},{key:"finish",label:this.$tc("sw-first-run-wizard.general.buttonFinish"),position:"right",variant:"primary",action:this.onFinish,disabled:!1}];this.$emit("buttons-update",e)},routeBackToSyncPrices(){this.$router.push({name:"swag.paypal.pos.wizard.syncPrices",params:{id:this.salesChannel.id}})},onFinish(){this.$emit("frw-finish")}}});const{Module:An}=Shopware;An.register("swag-paypal-pos",{type:"plugin",name:"SwagPayPalPos",title:"swag-paypal.general.mainMenuItemGeneral",description:"swag-paypal.general.descriptionTextModule",version:"1.0.0",targetVersion:"1.0.0",color:"#9AA8B5",icon:"default-action-settings",routes:{detail:{component:"swag-paypal-pos",path:":id/detail",redirect:{name:"swag.paypal.pos.detail.overview"},children:{overview:{component:"swag-paypal-pos-detail-overview",path:"overview"},syncedProducts:{component:"swag-paypal-pos-detail-synced-products",path:"synced-products"},settings:{component:"swag-paypal-pos-detail-settings",path:"settings"},runs:{component:"swag-paypal-pos-detail-runs",path:"runs"}}},wizard:{component:"swag-paypal-pos-wizard",path:":id?/wizard",redirect:{name:"swag.paypal.pos.wizard.connection"},children:{connection:{component:"swag-paypal-pos-wizard-connection",path:"connection"},connectionSuccess:{component:"swag-paypal-pos-wizard-connection-success",path:"connection-success"},connectionDisconnect:{component:"swag-paypal-pos-wizard-connection-disconnect",path:"connection-disconnect"},customization:{component:"swag-paypal-pos-wizard-customization",path:"customization"},productSelection:{component:"swag-paypal-pos-wizard-product-selection",path:"product-selection"},syncPrices:{component:"swag-paypal-pos-wizard-sync-prices",path:"sync-prices"},syncLibrary:{component:"swag-paypal-pos-wizard-sync-library",path:"sync-library"},finish:{component:"swag-paypal-pos-wizard-finish",path:"finish"}}}}})},Rq5H:function(e,a){e.exports='{% block swag_paypal_payment_action_refund %}\n    <sw-modal variant="small"\n              :title="$tc(`swag-paypal-payment.modal.title.refund`)"\n              @modal-close="$emit(\'modal-close\')">\n\n        {% block swag_paypal_payment_action_refund_invoice_select %}\n            <sw-select-field v-model="selectedCaptureId"\n                             :label="$tc(\'swag-paypal-payment.refundAction.invoiceSelect.label\')"\n                             @change="preserveCapture">\n                <option v-for="capture in captures"\n                        :value="capture.id">\n                    {{ capture.label }}\n                </option>\n            </sw-select-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_invoice_number %}\n            <swag-paypal-text-field v-model="refundInvoiceNumber"\n                                    maxLength="127"\n                                    :label="$tc(\'swag-paypal-payment.refundAction.refundInvoiceNumber.label\')"\n                                    :placeholder="$tc(\'swag-paypal-payment.refundAction.refundInvoiceNumber.placeholder\')">\n            </swag-paypal-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_reason %}\n            <swag-paypal-text-field v-model="refundReason"\n                                    maxLength="30"\n                                    :label="$tc(\'swag-paypal-payment.refundAction.refundReason.label\')"\n                                    :placeholder="$tc(\'swag-paypal-payment.refundAction.refundReason.placeholder\')">\n            </swag-paypal-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_amount %}\n            <sw-number-field v-model="refundAmount"\n                             :max="refundableAmount"\n                             :min="0"\n                             :label="$tc(\'swag-paypal-payment.refundAction.refundAmount.label\')"\n                             :helpText="$tc(\'swag-paypal-payment.refundAction.refundAmount.helpText\')">\n                <template #suffix>\n                    {{ selectedCapture.currency }}\n                </template>\n            </sw-number-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_description %}\n            <sw-textarea-field v-model="refundDescription"\n                               :placeholder="$tc(\'swag-paypal-payment.refundAction.refundDescription.placeholder\')"\n                               :label="$tc(\'swag-paypal-payment.refundAction.refundDescription.label\')">\n            </sw-textarea-field>\n        {% endblock %}\n\n        {% block swag_paypal_payment_action_refund_confirm_button %}\n            <template #modal-footer>\n                <sw-button variant="primary"\n                           @click="refund">\n                    {{ $tc(\'swag-paypal-payment.refundAction.confirmButton.text\') }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n        <sw-loader v-if="isLoading"></sw-loader>\n    </sw-modal>\n{% endblock %}\n'},UMdY:function(e,a){e.exports='{% block swag_paypal_pos_synced_products %}\n    <div class="swag-paypal-pos-detail-synced-products">\n\n        {% block swag_paypal_pos_synced_products_grid %}\n            <sw-card :title="$tc(\'swag-paypal-pos.detail.syncedProducts.title\')"\n                     :isLoading="isLoading">\n\n                {% block swag_paypal_pos_synced_products_grid %}\n                    <template #grid>\n                        <sw-data-grid v-if="total > 0"\n                                      identifier="swag-paypal-pos-detail-synced-products"\n                                      :dataSource="products"\n                                      :columns="columns"\n                                      :isLoading="isLoading"\n                                      :showActions="actions.length > 0"\n                                      :showSelection="false"\n                                      :showSettings="true"\n                                      :allowColumnEdit="true"\n                                      :sortBy="sortBy"\n                                      :sortDirection="sortDirection"\n                                      :skeletonItemAmount="limit"\n                                      @column-sort="onSortColumn">\n\n                            {% block swag_paypal_pos_synced_products_grid_pagination %}\n                                <template #pagination>\n                                    <sw-pagination :limit="limit"\n                                                   :page="page"\n                                                   :total="total"\n                                                   :total-visible="7"\n                                                   @page-change="onPageChange">\n                                    </sw-pagination>\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_synced_products_grid_column_date %}\n                                <template #column-date="{ item }">\n\n                                    {% block swag_paypal_pos_synced_products_grid_column_date_formatted %}\n                                        <template v-if="hasSync(item)">\n                                            {{ getSyncDate(item) | date({\n                                                hour: \'2-digit\',\n                                                minute: \'2-digit\',\n                                                day: \'2-digit\',\n                                                month: \'2-digit\',\n                                                year: \'2-digit\'\n                                            })\n                                            }}\n                                        </template>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_pos_synced_products_grid_column_date_empty %}\n                                        <template v-else>\n                                            {{ $tc(\'swag-paypal-pos.detail.syncedProducts.notSyncedYet\') }}\n                                        </template>\n                                    {% endblock %}\n\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_synced_products_grid_column_state %}\n                                <template #column-state="{ item }">\n\n                                    {% block swag_paypal_pos_synced_products_grid_column_state_label_log %}\n                                        <template v-if="hasSync(item)">\n                                            <sw-label appearance="pill"\n                                                      :variant="getLabelVariant(getLevel(item))">\n                                                {{ $tc(getLabel(getLevel(item))) }}\n                                            </sw-label>\n                                        </template>\n                                    {% endblock %}\n\n                                </template>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_synced_products_grid_actions %}\n                                <template v-if="actions"\n                                          #actions="{ item }">\n                                    <sw-context-menu-item v-for="action in actions"\n                                                          :key="action.label"\n                                                          @click="action.callback(item)">\n                                        {{ $tc(action.label) }}\n                                    </sw-context-menu-item>\n                                </template>\n                            {% endblock %}\n\n                        </sw-data-grid>\n                    </template>\n                {% endblock %}\n\n                {% block swag_paypal_pos_synced_products_empty_state %}\n                    <sw-empty-state v-if="total < 1"\n                                    class="swag-paypal-pos-detail-synced-products__empty-state"\n                                    :title="$tc(\'swag-paypal-pos.detail.syncedProducts.emptyState.title\')"\n                                    :subline="$tc(\'swag-paypal-pos.detail.syncedProducts.emptyState.message\')">\n                    </sw-empty-state>\n                {% endblock %}\n\n            </sw-card>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},Uf5m:function(e,a){e.exports='{% block swag_paypal_pos_detail_logs %}\n    {% block swag_paypal_pos_detail_logs_grid %}\n        <sw-data-grid identifier="swag-paypal-pos-detail-logs"\n                      :columns="columns"\n                      :dataSource="logs"\n                      :isLoading="isLoading || loadingLogs"\n                      :showActions="true"\n                      :showSelection="false"\n                      :showSettings="true"\n                      :allowColumnEdit="true"\n                      :sortBy="sortBy"\n                      :sortDirection="sortDirection"\n                      :skeletonItemAmount="limit"\n                      @column-sort="onSortColumn">\n\n            {% block swag_paypal_pos_detail_logs_grid_pagination %}\n                <template #pagination>\n                    <sw-pagination :limit="limit"\n                                   :page="page"\n                                   :total="total"\n                                   :total-visible="7"\n                                   @page-change="onPageChange">\n                    </sw-pagination>\n                </template>\n            {% endblock %}\n\n            {% block swag_paypal_pos_detail_logs_grid_column_date %}\n                <template #column-date="{ item }">\n\n                    {% block swag_paypal_pos_detail_logs_grid_column_date_formatted %}\n                        <template v-if="item.createdAt">\n                            {{ item.createdAt | date({\n                                hour: \'2-digit\',\n                                minute: \'2-digit\',\n                                day: \'2-digit\',\n                                month: \'2-digit\',\n                                year: \'2-digit\'\n                            })\n                            }}\n                        </template>\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_detail_logs_grid_column_date_empty %}\n                        <template v-else>\n                            {{ $tc(\'swag-paypal-pos.detail.logs.noEntry\') }}\n                        </template>\n                    {% endblock %}\n\n                </template>\n            {% endblock %}\n\n            {% block swag_paypal_pos_detail_logs_grid_column_state %}\n                <template #column-state="{ item }">\n\n                    {% block swag_paypal_pos_detail_logs_grid_column_state_label %}\n                        <sw-label v-if="item.level"\n                                  appearance="pill"\n                                  :variant="getLabelVariantForItem(item)">\n                            {{ $tc(getLabelForItem(item)) }}\n                        </sw-label>\n                    {% endblock %}\n\n                </template>\n            {% endblock %}\n\n        </sw-data-grid>\n    {% endblock %}\n{% endblock %}\n'},UgKC:function(e,a,n){var t=n("0Uy6");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("35366cc7",t,!0,{})},UgVe:function(e,a){e.exports='{% block swag_image_slider %}\n    <div class="swag-image-slider" :style="componentStyles">\n\n        {% block swag_image_slider_image_container %}\n            <div class="swag-image-slider__image-container"\n                 :style="containerStyles">\n\n                {% block swag_image_slider_image_container_scrollable %}\n                    <div class="swag-image-slider__image-container-scrollable"\n                         :style="scrollableContainerStyles">\n\n                        {% block swag_image_slider_images %}\n                            <div v-for="(image, index) in images"\n                                 class="swag-image-slider__image-container-element"\n                                 :style="elementStyles(index)">\n\n                                {% block swag_image_slider_image %}\n                                    <img class="swag-image-slider__image-container-element-image"\n                                         :src="image | asset"\n                                         :alt="imageAlt(index)">\n                                {% endblock %}\n                            </div>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </div>\n        {% endblock %}\n\n        {% block swag_image_slider_button_container %}\n            <div v-if="images.length >= 2"\n                 class="swag-image-slider__buttons">\n\n                {% block swag_image_slider_buttons %}\n                    <button v-for="(image, index) in images"\n                            class="swag-image-slider__buttons-element"\n                            :class="{ \'is--active\': index == currentPageNumber }"\n                            @click="onButtonClick(index)">\n                        {{ imageAlt(index) }}\n                    </button>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},VVuM:function(e,a){const{Mixin:n}=Shopware,{debug:t}=Shopware.Utils;n.register("swag-paypal-credentials-loader",{inject:["SwagPayPalApiCredentialsService"],data:()=>({isGetCredentialsSuccessful:!1,nonceLive:`${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,nonceSandbox:`${Shopware.Utils.createId()}${Shopware.Utils.createId()}`,payPalPartnerIdLive:"W8HDQ6LB42CJW",payPalPartnerClientIdLive:"AVTKpaE_t1zRCDfiJOP1ZYMAW0S_IvASFOIhhbeszRUFY0vsFIsGrt_FFsgHKU4VJiqub-tI30dpnANJ",payPalPartnerIdSandbox:"J425NKDMLL4YA",payPalPartnerClientIdSandbox:"AdRxw_8f4e2MOEduZB6D6ZOkdjnbR3SQJ1dQP3Y6GDLkxK0g4j0km2V2tRjoVDe0T2ZqQX6NlzpKsBwE",requestParams:{channelId:"partner",productIntentId:"addipmt",integrationType:"FO",features:["PAYMENT","REFUND","READ_SELLER_DISPUTE","UPDATE_SELLER_DISPUTE","ADVANCED_TRANSACTIONS_SEARCH"],displayMode:"minibrowser"}}),computed:{onboardingUrlLive(){return"https://www.paypal.com/US/merchantsignup/partner/onboardingentry?"+this.createRequestParameter({partnerId:this.payPalPartnerIdLive,partnerClientId:this.payPalPartnerClientIdLive,returnToPartnerUrl:this.returnUrl(),sellerNonce:this.nonceLive}).toString()},onboardingUrlSandbox(){return"https://www.sandbox.paypal.com/US/merchantsignup/partner/onboardingentry?"+this.createRequestParameter({partnerId:this.payPalPartnerIdSandbox,partnerClientId:this.payPalPartnerClientIdSandbox,returnToPartnerUrl:this.returnUrl(),sellerNonce:this.nonceSandbox}).toString()}},created(){this.$root.$on("paypal-onboarding-finish",this.getPayPalCredentials),window.onboardingCallbackLive=function(e,a){Shopware.Application.getApplicationRoot().$emit("paypal-onboarding-finish",{authCode:e,sharedId:a,sandbox:!1})},window.onboardingCallbackSandbox=function(e,a){Shopware.Application.getApplicationRoot().$emit("paypal-onboarding-finish",{authCode:e,sharedId:a,sandbox:!0})}},mounted(){this.createScript()},destroyed(){this.$root.$off("paypal-onboarding-finish")},methods:{returnUrl(){return`${window.location.origin}${window.location.pathname}#${this.$route.path}`},createRequestParameter(e={}){const a={...this.requestParams,...e};return Object.keys(a).reduce((e,n)=>{let t=a[n];return Array.isArray(t)&&(t=t.join(",")),e.append(n,t),e},new URLSearchParams)},createScript(){const e="paypal-js";if(document.getElementById(e))window.PAYPAL&&this.renderPayPalButton();else{const a="https://www.paypal.com/webapps/merchantboarding/js/lib/lightbox/partner.js",n=document.createElement("script");n.id=e,n.type="text/javascript",n.src=a,n.async=!0,n.addEventListener("load",this.renderPayPalButton.bind(this),!1),document.head.appendChild(n)}},renderPayPalButton(){window.PAYPAL.apps.Signup.render=function(){window.PAYPAL.apps.Signup.timeout&&clearTimeout(window.PAYPAL.apps.Signup.timeout),window.PAYPAL.apps.Signup.timeout=setTimeout(window.PAYPAL.apps.Signup.render,300)},window.PAYPAL.apps.Signup.render()},getPayPalCredentials({authCode:e,sharedId:a,sandbox:n}){return this.isLoading?Promise.resolve(!1):(this.isGetCredentialsSuccessful=null,this.isLoading=!0,this.SwagPayPalApiCredentialsService.getApiCredentials(e,a,n?this.nonceSandbox:this.nonceLive,n).then(e=>{this.isGetCredentialsSuccessful=!0,this.onPayPalCredentialsLoadSuccess(e.client_id,e.client_secret,n)}).catch(()=>{this.isGetCredentialsSuccessful=!1,this.onPayPalCredentialsLoadFailed(n)}).finally(()=>{this.isLoading=!1}))},onPayPalCredentialsLoadSuccess(){t.warn("swag-paypal-credentials-loader Mixin",'When using the paypal-credentials-loader mixin you have to implement your custom "onPayPalCredentialsLoadSuccess()" method.')},onPayPalCredentialsLoadFailed(){t.warn("swag-paypal-credentials-loader Mixin",'When using the paypal-credentials-loader mixin you have to implement your custom "onPayPalCredentialsLoadFailed()" method.')}}})},Xge3:function(e,a){e.exports='{% block sw_order_detail_content_tabs_general %}\n    {% parent %}\n\n    <sw-tabs-item v-if="isPayPalPayment"\n                  :route="{ name: \'swag.paypal.payment.detail\', params: { id: $route.params.id } }"\n                  :title="$tc(\'swag-paypal.header\')">\n        {{ $tc(\'swag-paypal.header\') }}\n    </sw-tabs-item>\n{% endblock %}\n\n\n{% block sw_order_detail_actions_slot_smart_bar_actions %}\n    <template v-if="isEditable">\n        {% parent %}\n    </template>\n{% endblock %}\n'},YBJ2:function(e,a,n){},ZLee:function(e){e.exports=JSON.parse('{"swag-paypal-frw-credentials":{"buttonGetCredentials":"Hole API Zugangsdaten","textIntroPayPal":"Um PayPal zu nutzen müssen nur die API Zugangsdaten eingegeben werden.","labelClientId":"Client-ID","labelClientSecret":"Client-Secret","labelClientIdSandbox":"Sandbox-Client-ID","labelClientSecretSandbox":"Sandbox-Client-Secret","labelSandbox":"Sandbox","tooltipSandbox":"Je nach Aktivierung der Sandbox werden unterschiedliche Zugangsdaten hinterlegt.","textSettingsHeader":"Erweiterte Einstellungen","messageFetchedError":" Bitte versuche es erneut oder nutze die erweiterten Einstellungen um die Zugangsdaten direkt einzugeben.","titleFetchedError":"Es ist ein Fehler aufgetreten","textFetchedSuccessful":"Die Zugangsdaten wurden erfolgreich abgerufen.","titleNoCredentials":"Fehler","messageNoCredentials":"Es wurden keine Zugangsdaten hinterlegt.","messageTestSuccess":"Die Zugangsdaten sind gültig.","titleTestError":"Fehler"}}')},ZkYA:function(e,a){e.exports='{% block swag_paypal_pos_wizard_connection %}\n    <div class="swag-paypal-pos-wizard-connection">\n\n        {% block swag_paypal_pos_wizard_connection_headline %}\n            <div class="swag-paypal-pos-wizard-connection__headline">\n                {{ $tc(\'swag-paypal-pos.wizard.connection.headerConnect\') }}\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_connection_apikey %}\n            <sw-password-field\n                    v-model="salesChannel.extensions.paypalPosSalesChannel.apiKey"\n                    class="swag-paypal-pos-wizard-connection__apikey-field"\n                    required\n                    :label="$tc(\'swag-paypal-pos.authentication.labelApiKey\')"\n                    :placeholder="$tc(\'swag-paypal-pos.authentication.placeholderApiKey\')"\n                    @input="forceUpdate">\n                <template #suffix>\n\n                    {% block swag_paypal_pos_wizard_connection_apikey_suffix %}\n                        <sw-icon name="default-lock-key"\n                                 class="swag-paypal-pos-wizard-connection__apikey-suffix"\n                                 size="22px">\n                        </sw-icon>\n                    {% endblock %}\n                </template>\n            </sw-password-field>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_connection_apikey_description %}\n            <div class="swag-paypal-pos-wizard-connection__apikey-description">\n\n                {% block swag_paypal_pos_wizard_connection_apikey_description_text %}\n                    <div class="swag-paypal-pos-wizard-connection__apikey-description-text">\n                        {{ $tc(\'swag-paypal-pos.authentication.apiKeyDescription\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_connection_apikey_description_link %}\n                    <a :href="apiKeyUrl"\n                       target="_blank"\n                       class="link swag-paypal-pos-wizard-connection__apikey-description-link">\n\n                        {% block swag_paypal_pos_wizard_connection_apikey_description_link_text %}\n                            {{ $tc(\'swag-paypal-pos.authentication.buttonGenerateKey\') }}\n                            <sw-icon class="swag-paypal-pos-wizard-connection__link-icon"\n                                     name="default-action-external"\n                                     size="10px">\n                            </sw-icon>\n                        {% endblock %}\n                    </a>\n                {% endblock %}\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_connection_header_new_customer %}\n            <div class="swag-paypal-pos-wizard-connection__new-customer-headline">\n                {{ $tc(\'swag-paypal-pos.wizard.connection.headerNewCustomer\') }}\n            </div>\n        {% endblock %}\n\n\n        {% block swag_paypal_pos_wizard_connection_new_customer %}\n            <sw-card :isLoading="isConnecting">\n                <sw-container\n                        class="swag-paypal-pos-wizard-connection__new-customer-container"\n                        columns="1fr 1fr"\n                        align="center"\n                        gap="300px">\n\n                    {% block swag_paypal_pos_wizard_connection_new_customer_image %}\n                        <img class="swag-paypal-pos-wizard-connection__pos-logo"\n                             :src="\'swagpaypal/static/img/paypal-pos-logo-full.png\' | asset"\n                             alt="iZettle logo">\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_wizard_connection_new_customer_button %}\n                        <sw-button class="swag-paypal-pos-wizard-connection__pos-link"\n                                   variant="ghost"\n                                   size="small"\n                                   :link="$tc(\'swag-paypal-pos.wizard.connection.buttonCreateAccountLink\')">\n\n                            {% block swag_paypal_pos_wizard_connection_new_customer_button_text %}\n                                <span class="swag-paypal-pos-wizard-connection__pos-link-text">\n                                    {{ $tc(\'swag-paypal-pos.wizard.connection.buttonCreateAccount\') }}\n                                </span>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_wizard_connection_new_customer_button_icon %}\n                                <sw-icon name="default-action-external"\n                                         class="swag-paypal-pos-wizard-connection__pos-link-icon"\n                                         size="10px">\n                                </sw-icon>\n                            {% endblock %}\n                        </sw-button>\n                    {% endblock %}\n                </sw-container>\n            </sw-card>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"aE/U":function(e,a){e.exports='{% block swag_paypal_content_card_channel_config_express %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.express.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_express_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-express-fields">\n\n                {% block swag_paypal_content_card_channel_config_express_settings_detail_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsDetailEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsDetailEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsDetailEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsDetailEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsDetailEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_cart_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsCartEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsCartEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsCartEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsCartEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsCartEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_off_canvas_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsOffCanvasEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsOffCanvasEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsOffCanvasEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsOffCanvasEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsOffCanvasEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n\n                {% block swag_paypal_content_card_channel_config_express_settings_login_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsLoginEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsLoginEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsLoginEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsLoginEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsLoginEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_listing_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsListingEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsListingEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsListingEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsListingEnabled.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsListingEnabled.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_color %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsButtonColor\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonColor\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonColor.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.ecsButtonColor"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonColorOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_shape %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsButtonShape\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonShape\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance"\n                        :label="$tc(\'swag-paypal.settingForm.express.ecsButtonShape.label\')">\n                        <template #content="props">\n                            <sw-single-select name="SwagPayPal.settings.ecsButtonShape"\n                                              labelProperty="name"\n                                              valueProperty="id"\n                                              :options="buttonShapeOptions"\n                                              :isInherited="props.isInherited"\n                                              :disabled="props.isInherited"\n                                              :value="props.currentValue"\n                                              @change="props.updateCurrentValue">\n                            </sw-single-select>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_submit_cart %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsSubmitCart\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsSubmitCart\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.ecsSubmitCart"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.express.ecsSubmitCart.label\')"\n                                             :helpText="$tc(\'swag-paypal.settingForm.express.ecsSubmitCart.helpText\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_express_settings_button_locale %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.ecsButtonLanguageIso\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.ecsButtonLanguageIso\']"\n                        :customInheritationCheckFunction="checkTextFieldInheritance">\n                        <template #content="props">\n                            <sw-paypal-locale-field name="SwagPayPal.settings.ecsButtonLanguageIso"\n                                                    :mapInheritance="props"\n                                                    :label="$tc(\'swag-paypal.settingForm.express.ecsButtonLanguageIso.label\')"\n                                                    :helpText="$tc(\'swag-paypal.settingForm.express.ecsButtonLanguageIso.helpText\')"\n                                                    :disabled="props.isInherited"\n                                                    :value="props.currentValue"\n                                                    @change="props.updateCurrentValue"\n                                                    @preventSave="preventSave">\n                            </sw-paypal-locale-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},auMI:function(e,a,n){var t=n("23L4");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("d8fd1d14",t,!0,{})},cNsE:function(e,a,n){var t=n("/DM6");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("1dc8eacc",t,!0,{})},dChU:function(e,a,n){var t=n("Dvpo");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("216cd9fc",t,!0,{})},"fn/Y":function(e,a){e.exports='{% block swag_paypal_pos_wizard_customization %}\n    <div v-if="!isLoading"\n         class="swag-paypal-pos-wizard-customization">\n\n        {% block swag_paypal_pos_wizard_customization_name %}\n            <sw-text-field v-model="salesChannel.name"\n                           class="swag-paypal-pos-wizard-customization__name-field"\n                           validation="required"\n                           required\n                           :label="$tc(\'swag-paypal-pos.wizard.customization.salesChannelLabel\')"\n                           :placeholder="$tc(\'sw-sales-channel.detail.placeholderName\')"\n                           @input="forceUpdate">\n            </sw-text-field>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_customization_media_domain %}\n            <sw-url-field v-model="salesChannel.extensions.paypalPosSalesChannel.mediaDomain"\n                          class="swag-paypal-pos-wizard-customization__domain-field"\n                          required\n                          :label="$tc(\'swag-paypal-pos.wizard.customization.labelDomain\')"\n                          :placeholder="$tc(\'swag-paypal-pos.wizard.customization.placeholderDomain\')"\n                          @input="forceUpdate">\n            </sw-url-field>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_connection_success_disclaimer %}\n            <div class="swag-paypal-pos-wizard-customization__subtitle">\n                {{ $tc(\'swag-paypal-pos.wizard.customization.subtitle\') }}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"g+Rj":function(e,a,n){},gisM:function(e,a,n){var t=n("Oi+7");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("5166964c",t,!0,{})},hOdW:function(e){e.exports=JSON.parse('{"swag-paypal":{"header":"PayPal","saleschannelCard":{"button":{"description":"Click this button to enable PayPal and select it as default in the selected Saleschannel","label":"Set PayPal as default"}},"general":{"mainMenuItemGeneral":"PayPal","descriptionTextModule":"PayPal settings"},"messageNotBlank":"This value should not be blank.","settingForm":{"save":"Save","testLive":"Test API credentials","testSandbox":"Test sandbox API credentials","credentials":{"cardTitle":"API credentials","clientId":{"label":"Client ID","tooltipText":"The REST API client ID is used to authenticate this plugin with the PayPal API."},"clientSecret":{"label":"Client secret","tooltipText":"The REST API client secret is used to authenticate this plugin with the PayPal API."},"clientIdSandbox":{"label":"Sandbox client ID","tooltipText":"The REST API client ID is used while testing to authenticate this plugin with the PayPal API."},"clientSecretSandbox":{"label":"Sandbox client secret","tooltipText":"The REST API client secret is used while testing to authenticate this plugin with the PayPal API."},"sandbox":{"label":"Enable sandbox","tooltipText":"Enable if you want to test the PayPal integration."},"button":{"title":"Get API credentials","titleSandbox":"Get sandbox API credentials","messageFetchedError":"Try again or enter your credentials manually.","titleFetchedError":"An error occurred"}},"behaviour":{"cardTitle":"Behaviour","merchantLocation":{"label":"Merchant location","germany":"Germany","other":"Other merchant location"},"intent":{"label":"Payment acquisition","hint":"Note: PayPal PLUS only works with the payment acquisition \\"Sale\\". It will be set automatically, regardless of the selected option.","sale":"Complete payment immediately (Sale)","authorize":"Delayed payment collection (Auth-Capture)","order":"Delayed payment collection (Order-Auth-Capture)"},"submitCart":{"label":"Submit cart","helpText":"If this option is active, cart data will be submitted to PayPal at checkout."},"brandName":{"label":"Your own brand name on PayPal page","tooltipText":"This text will be displayed as the brand name on the PayPal payment page."},"landingPage":{"label":"PayPal landing page","helpText":{"Login":"Login: The PayPal site displays a login screen as landing page.","Billing":"Registration: The PayPal site displays a registration form as landing page."},"options":{"Login":"Login","Billing":"Registration"}},"sendOrderNumber":{"label":"Submit order number","helpText":"If this option is active, the order number will be submitted to PayPal at checkout."},"orderNumberPrefix":{"label":"Order number prefix","tooltipText":"This text is placed before the original order number (e.g MyShop_SW20001). This helps to identify the shop where the payment was made."}},"express":{"cardTitle":"PayPal Express Checkout","ecsDetailEnabled":{"label":"\'Pay now\' on detail page:","helpText":"If this option is active, the Express Checkout button will be shown on each product detail page."},"ecsCartEnabled":{"label":"\'Pay now\' on cart:","helpText":"If this option is active, the Express Checkout button will be shown on the cart."},"ecsOffCanvasEnabled":{"label":"\'Pay Now\' on Off-Canvas cart:","helpText":"If this option is active, the Express Checkout button will be shown on the Off-Canvas cart."},"ecsLoginEnabled":{"label":"\'Pay Now\' on login page:","helpText":"If this option is active, the Express Checkout button will be shown on the login and register page."},"ecsListingEnabled":{"label":"\'Pay now\' on listing pages:","helpText":"If this option is active, the Express Checkout button will be shown on listing pages."},"ecsButtonColor":{"label":"Button color:","options":{"blue":"Blue","black":"Black","gold":"Gold","silver":"Silver"}},"ecsButtonShape":{"label":"Button shape:","options":{"pill":"Round","rect":"Rectangular"}},"ecsSubmitCart":{"label":"Submit cart","helpText":"If this option is active, the cart will be submitted to PayPal for Express orders."},"ecsButtonLanguageIso":{"label":"Button locale:","helpText":"If not set, the sales channel language will be used."}},"installment":{"cardTitle":"Installments","installmentBannerEnabled":{"label":"Enable installment banner"}},"spb":{"cardTitle":"PayPal Checkout with Smart Payment Buttons","spbCheckoutEnabled":{"label":"Enable Smart Payment Buttons"},"spbButtonLanguageIso":{"label":"Button locale:","helpText":"If not set, the sales channel language will be used."},"spbAlternativePaymentMethodsEnabled":{"label":"Enable the alternative payment methods for the Smart Payment Buttons.","helpText":"Alternative payment methods are, Creditcards, Invoice and more."}},"plus":{"cardTitle":"PayPal PLUS","introduction":"<strong>PayPal PLUS:</strong> Your complete all-in-one payment solution including PayPal, Direct Debit, Credit Card and Pay Upon Invoice. PayPal PLUS offers your customers full flexibility in choosing their preferred payment method. Your advantages as a seller? Easier accounting with only one contracting party, one account and one transaction overview showing all incoming payments. You receive your money directly after customers complete the order process.<br>You can apply for PayPal PLUS <a href=\'https://www.paypal.com/de/webapps/mpp/paypal-plus\' target=\'_blank\'>here</a>. Apply for Payment upon Invoice <a href=\'https://www.paypal.com/de/webapps/mpp/pui-start\' target=\'_blank\'>here</a>.","plusCheckoutEnabled":{"label":"Enable PayPal PLUS"}},"locale-field":{"infobox":{"text":"To see a list of valid locale codes click ","href":"here"},"error":{"detail":"The locale code you provided doesn\'t match the format required by PayPal. A valid format is \\"en_GB\\"."}},"titleSuccess":"Success","titleError":"Error","messageSaveSuccess":"The PayPal settings have been saved.","messageTestSuccess":"The API credentials have been validated.","messageTestError":"The API credentials could not be validated.","messageWebhookCreated":"The webhook has been registered.","messageWebhookUpdated":"The webhook has been updated.","messageWebhookError":"The webhook could not be saved. The following errors occurred:"}}}')},hXsm:function(e,a){e.exports="{% block swag_paypal_pos_continue_setup %}\n    <sw-card :title=\"$tc('swag-paypal-pos.detail.overview.continueSetup.cardTitle')\">\n\n        {% block swag_paypal_pos_continue_setup_container %}\n            <div class=\"swag-paypal-pos__continue-setup\">\n\n                {% block swag_paypal_pos_continue_setup_container_headline %}\n                    <h6>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.headline') }}</h6>\n                {% endblock %}\n\n                {% block swag_paypal_pos_continue_setup_container_firstLine %}\n                    <p>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.firstLine') }}</p>\n                {% endblock %}\n\n                {% block swag_paypal_pos_continue_setup_container_secondLine %}\n                    <p>{{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.secondLine') }}</p>\n                {% endblock %}\n\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_continue_setup_button %}\n            <sw-button variant=\"ghost\"\n                       @click=\"onContinueSetup\">\n                {{ $tc('swag-paypal-pos.detail.overview.continueSetup.content.headline') }}\n            </sw-button>\n        {% endblock %}\n\n    </sw-card>\n{% endblock %}\n"},hYJc:function(e,a,n){var t=n("5ya8");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("41a997a0",t,!0,{})},hgvj:function(e,a,n){var t=n("2vrd");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("f6497faa",t,!0,{})},i1vQ:function(e,a){const{Component:n}=Shopware;n.extend("swag-paypal-pos-url-field","sw-url-field",{props:{error:{type:Object,required:!1}},watch:{error:{handler(){this.errorUrl=this.error,null!==this.error&&"undefined"!==this.error||this.checkInput(this.currentValue)},immediate:!0},errorUrl(){null!==this.errorUrl&&"undefined"!==this.errorUrl||(this.errorUrl=this.error)}}})},i7Bf:function(e,a,n){var t=n("u+Wf");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("beae5b62",t,!0,{})},"j5/r":function(e,a,n){var t=n("xIMA");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("3d0b0110",t,!0,{})},k1Kq:function(e,a){e.exports='{% block swag_paypal_pos_boolean_radio %}\n    <sw-radio-field\n        v-model="castedValue"\n        v-bind="$attrs"\n        class="swag-paypal-pos-boolean-radio"\n        :name="name"\n        :options="options">\n    </sw-radio-field>\n{% endblock %}\n'},kBLT:function(e,a,n){},kTpT:function(e,a,n){var t=n("rdVw");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("1b3d9cce",t,!0,{})},lA1j:function(e,a){const{Mixin:n}=Shopware;n.register("swag-paypal-pos-catch-error",{methods:{catchError(e,a){let n=e?this.$root.$tc(e):"";try{if(a.response.data&&a.response.data.errors){const e=a.response.data.errors.map(e=>e.detail).join(" / ");e&&(n=n?`${n}: ${e}`:e)}}finally{this.createNotification({variant:"error",title:this.$root.$tc("global.default.error"),message:n})}}}})},lu4H:function(e,a,n){var t=n("g+Rj");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("09ab3f0a",t,!0,{})},"mE/h":function(e,a,n){},mRCN:function(e,a,n){},nEzq:function(e,a,n){},nYtA:function(e,a,n){var t={"./icons-placeholder.svg":"y9n1"};function s(e){var a=i(e);return n(a)}function i(e){if(!n.o(t,e)){var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}return t[e]}s.keys=function(){return Object.keys(t)},s.resolve=i,e.exports=s,s.id="nYtA"},ngFu:function(e){e.exports=JSON.parse('{"swag-paypal-payment":{"general":{"title":"Orders"},"tabs":{"overview":"Overview"},"paymentDetails":{"cardTitle":"Payment","invoice":{"heading":"Invoice amount","totalAmount":"Total amount:","subTotal":"Subtotal:","shipping":"Shipping:"},"payment":{"heading":"Payment details","intent":"Intent:","paymentId":"Payment ID:","cartId":"Cart ID:","state":"State:","createTime":"Create time:","updateTime":"Update time:"},"customer":{"heading":"Customer","payerId":"Payer ID:"},"error":{"title":"Error fetching payment details from PayPal"}},"transactionHistory":{"cardTitle":"Payment History","states":{"authorization":"Authorization","sale":"Sale","refund":"Refund","capture":"Capture","order":"Order"},"types":{"type":"Type","amount":"Amount","createTime":"Created","updateTime":"Updated","state":"State","trackingId":"Tracking ID","transactionFee":"Transaction fee","paymentMode":"Payment mode"}},"buttons":{"label":{"refund":"Create a new refund","capture":"Capture","void":"Cancel authorization"}},"modal":{"title":{"refund":"New refund","capture":"Capture","void":"Cancel authorization"}},"refundAction":{"successMessage":"Your refund was successful.","invoiceSelect":{"label":"Select capture"},"refundAmount":{"label":"Amount","helpText":"An amount of \'0\' will cause the refund of the complete payment"},"refundDescription":{"label":"Description","placeholder":"Enter a description"},"refundReason":{"label":"Reason","placeholder":"Enter a reason"},"refundInvoiceNumber":{"label":"Invoice number","placeholder":"Enter an invoice number"},"confirmButton":{"text":"Execute"}},"captureAction":{"successMessage":"Your capture was successful.","maxAmount":"Maximum amount","currentAmount":"Amount","isFinal":"This is final capture","isFinalHint":"Hint: Marked as final capture, although not the entire amount is to be captured.","button":{"text":"Capture payment"}},"voidAction":{"successMessage":"The payment was successfully voided.","confirm":{"message":"Do you really want to cancel this payment?","button":{"confirm":"Cancel authorization","cancel":"No"}}},"errorPage":{"title":"Payment details no longer available","canceledPaymentContent":"An error occurred (INVALID_RESOURCE_ID) while retrieving payment details from PayPal. If you see this message, it was probably a payment that was cancelled by the customer. Cancelled payments will be deleted by PayPal after a while and are then no longer available.","sandboxLiveContent":"An error occurred (INVALID_RESOURCE_ID) while retrieving payment details from PayPal. If you see this message, it was probably a payment that was created with sandbox enabled and has now been requested with live data, or vice versa. Correct your PayPal settings or delete test orders from the system."}}}')},odUu:function(e,a,n){var t=n("8/Op");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("00edb2ad",t,!0,{})},opui:function(e,a,n){var t=n("7QVQ");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("26cb943d",t,!0,{})},qfpb:function(e,a){e.exports='{% block swag_paypal_pos_wizard_finish %}\n    <div class="swag-paypal-pos-wizard-finish">\n\n        {% block swag_paypal_pos_wizard_finish_content %}\n            <div class="swag-paypal-pos-wizard-finish__content">\n\n                {% block swag_paypal_pos_wizard_finish_content_icon %}\n                    <div class="swag-paypal-pos-wizard-finish__icon-wrapper">\n                        <sw-icon class="swag-paypal-pos-wizard-finish__icon"\n                                 name="default-basic-checkmark-line"\n                                 size="80px"\n                                 color="#37D046">\n                        </sw-icon>\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_finish_content_header %}\n                    <div class="swag-paypal-pos-wizard-finish__content-header">\n                        {{ $tc(\'swag-paypal-pos.wizard.finish.header\') }}\n                    </div>\n                {% endblock %}\n\n                {% block swag_paypal_pos_wizard_finish_content_description %}\n                    <div class="swag-paypal-pos-wizard-finish__content-description">\n                        <p class="swag-paypal-pos-wizard-finish__first-paragraph">\n                            {{ $tc(\'swag-paypal-pos.wizard.finish.firstParagraph\') }}\n                        </p>\n\n                        <p class="swag-paypal-pos-wizard-finish__second-paragraph">\n                            {{ $tc(\'swag-paypal-pos.wizard.finish.secondParagraph\') }}\n                        </p>\n                    </div>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},rdVw:function(e,a,n){},rxNa:function(e,a){e.exports='{% block swag_paypal_pos_wizard_product_selection %}\n    <div class="swag-paypal-pos-wizard-product-selection">\n\n        {% block swag_paypal_pos_wizard_product_selection_info %}\n            <p class="swag-paypal-pos-wizard-product-selection__info">\n                {{ $tc(\'swag-paypal-pos.wizard.productSelection.info\') }}\n            </p>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_product_selection_sales_channel_toggle %}\n            <sw-switch-field v-model="hasClone"\n                             class="swag-paypal-pos-wizard-product-selection__clone-switch"\n                             bordered\n                             :label="$tc(\'swag-paypal-pos.wizard.productSelection.labelToggle\')"\n                             @change="updateClone">\n            </sw-switch-field>\n        {% endblock %}\n\n        {% block swag_paypal_pos_wizard_product_selection_sales_channel_select %}\n            <sw-entity-single-select v-model="localCloneSalesChannelId"\n                                     class="swag-paypal-pos-wizard-product-selection__saleschannel-select"\n                                     entity="sales_channel"\n                                     :criteria="salesChannelCriteria"\n                                     :disabled="!hasClone"\n                                     :label="$tc(\'swag-paypal-pos.wizard.productSelection.labelSelect\')"\n                                     @input="forceUpdate">\n            </sw-entity-single-select>\n        {% endblock %}\n    </div>\n{% endblock %}\n'},"szT/":function(e,a){e.exports='{% block swag_paypal_pos_getting_started %}\n    <sw-card :title="$tc(\'swag-paypal-pos.gettingStarted.cardTitle\')">\n\n        {% block swag_paypal_pos_getting_started_reader %}\n            <sw-container\n                    class="swag-paypal-pos-getting-started__container-reader"\n                    columns="1fr 3fr"\n                    justify="left"\n                    align="center">\n\n                {% block swag_paypal_pos_getting_started_reader_image %}\n                    <img class="swag-paypal-pos-getting-started__image"\n                         :src="\'swagpaypal/static/img/paypal-pos-reader.png\' | asset"\n                         :alt="$tc(\'swag-paypal-pos.gettingStarted.readerImageAlt\')"/>\n                {% endblock %}\n\n                {% block swag_paypal_pos_getting_started_reader_description %}\n                    <div class="swag-paypal-pos-getting-started__description">\n\n                        {% block swag_paypal_pos_getting_started_reader_description_headline %}\n                            <div class="swag-paypal-pos-getting-started__description-headline">\n                                {{ $tc(\'swag-paypal-pos.gettingStarted.readerHeadline\') }}\n                            </div>\n                        {% endblock %}\n\n                        {% block swag_paypal_pos_getting_started_reader_description_text %}\n                            <div class="swag-paypal-pos-getting-started__description-text">\n                                {{ $tc(\'swag-paypal-pos.gettingStarted.readerText\') }}\n\n                                {% block swag_paypal_pos_getting_started_reader_description_link %}\n                                    <a :href="$tc(\'swag-paypal-pos.gettingStarted.readerLinkTarget\')"\n                                       target="_blank"\n                                       class="link swag-paypal-pos-getting-started__description-text-link">\n                                        {{ $tc(\'swag-paypal-pos.gettingStarted.readerLinkText\') }}\n                                        <sw-icon class="swag-paypal-pos-getting-started__description-link-icon"\n                                                 name="default-action-external"\n                                                 size="10px">\n                                        </sw-icon>\n                                    </a>\n                                {% endblock %}\n                            </div>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n\n        {% block swag_paypal_pos_getting_started_app %}\n            <sw-container\n                    class="swag-paypal-pos-getting-started__container-app"\n                    columns="1fr 3fr"\n                    justify="left"\n                    align="center">\n\n                {% block swag_paypal_pos_getting_started_app_image %}\n                    <img class="swag-paypal-pos-getting-started__image"\n                         :src="\'swagpaypal/static/img/paypal-pos-app.png\' | asset"\n                         :alt="$tc(\'swag-paypal-pos.gettingStarted.appImageAlt\')"/>\n                {% endblock %}\n\n                {% block swag_paypal_pos_getting_started_app_description %}\n                    <div class="swag-paypal-pos-getting-started__description ">\n\n                        {% block swag_paypal_pos_getting_started_app_description_headline %}\n                            <div class="swag-paypal-pos-getting-started__description-headline">\n                                {{ $tc(\'swag-paypal-pos.gettingStarted.appHeadline\') }}\n                            </div>\n                        {% endblock %}\n\n                        {% block swag_paypal_pos_getting_started_app_description_text %}\n                            <div v-html="$tc(\'swag-paypal-pos.gettingStarted.appText\')"\n                                 class="swag-paypal-pos-getting-started__description-text">\n                            </div>\n                        {% endblock %}\n                    </div>\n                {% endblock %}\n            </sw-container>\n        {% endblock %}\n    </sw-card>\n{% endblock %}'},"u+Wf":function(e,a,n){},vGFi:function(e,a,n){var t=n("QL3A");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("8e50e548",t,!0,{})},vKC4:function(e,a,n){},vcRu:function(e,a,n){var t=n("HgMU");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("7acf85b2",t,!0,{})},w9E9:function(e,a){e.exports='{% block swag_paypal_content_card_channel_config_plus %}\n    <sw-card :title="$tc(\'swag-paypal.settingForm.plus.cardTitle\')">\n\n        {% block swag_paypal_content_card_channel_config_plus_settings %}\n            <div v-if="actualConfigData" class="swag-paypal-settings-plus-fields">\n\n                {% block swag_paypal_content_card_channel_config_plus_settings_onboarding %}\n                    <p v-html="$tc(\'swag-paypal.settingForm.plus.introduction\')"></p>\n                {% endblock %}\n\n                {% block swag_paypal_content_card_channel_config_plus_settings_checkout_enabled %}\n                    <sw-inherit-wrapper\n                        v-model="actualConfigData[\'SwagPayPal.settings.plusCheckoutEnabled\']"\n                        :inheritedValue="selectedSalesChannelId == null ? null : allConfigs[\'null\'][\'SwagPayPal.settings.plusCheckoutEnabled\']"\n                        :customInheritationCheckFunction="checkBoolFieldInheritance">\n                        <template #content="props">\n                            <sw-switch-field name="SwagPayPal.settings.plusCheckoutEnabled"\n                                             bordered\n                                             :mapInheritance="props"\n                                             :label="$tc(\'swag-paypal.settingForm.plus.plusCheckoutEnabled.label\')"\n                                             :disabled="props.isInherited"\n                                             :value="props.currentValue"\n                                             @change="props.updateCurrentValue">\n                            </sw-switch-field>\n                        </template>\n                    </sw-inherit-wrapper>\n                {% endblock %}\n            </div>\n        {% endblock %}\n    </sw-card>\n{% endblock %}\n'},wQQF:function(e,a,n){var t=n("mE/h");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("7ebb46af",t,!0,{})},wqkP:function(e,a,n){var t=n("vKC4");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("e3c118ee",t,!0,{})},xIMA:function(e,a,n){},xNo3:function(e,a){e.exports='{% block swag_paypal_pos %}\n    <sw-page class="swag-paypal-pos">\n\n        {% block swag_paypal_pos_header %}\n            <template #smart-bar-header>\n                <h2>\n                    {{ $tc(\'swag-paypal-pos.header\') }}\n                </h2>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_pos_actions %}\n            <template #smart-bar-actions>\n                <sw-button v-for="button in buttonConfig"\n                           size="small"\n                           :key="button.key"\n                           :disabled="button.disabled"\n                           :isLoading="button.isLoading || isLoading"\n                           :variant="button.variant"\n                           @click="onButtonClick(button.action)">\n                    {{ button.label }}\n                </sw-button>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_pos_content %}\n            <template #content>\n                <sw-card-view>\n\n                    {% block swag_paypal_pos_content_tabs %}\n                        <sw-tabs v-if="!isLoading" class="swag-paypal-pos__tabs">\n\n                            {%  block swag_paypal_pos_content_tab_base %}\n                                <sw-tabs-item :route="{ name: \'swag.paypal.pos.detail.overview\', params: { id: $route.params.id } }"\n                                              :title="$tc(\'swag-paypal-pos.tabTitle.overview\')">\n                                    {{ $tc(\'swag-paypal-pos.tabTitle.overview\') }}\n                                </sw-tabs-item>\n                            {% endblock %}\n\n                            {%  block swag_paypal_pos_content_tab_synced_products %}\n                                <sw-tabs-item :route="{ name: \'swag.paypal.pos.detail.syncedProducts\', params: { id: $route.params.id } }"\n                                              :title="$tc(\'swag-paypal-pos.tabTitle.syncedProducts\')">\n                                    {{ $tc(\'swag-paypal-pos.tabTitle.syncedProducts\') }}\n                                </sw-tabs-item>\n                            {% endblock %}\n\n                            {%  block swag_paypal_pos_content_tab_settings %}\n                                <sw-tabs-item :route="{ name: \'swag.paypal.pos.detail.settings\', params: { id: $route.params.id } }"\n                                              :title="$tc(\'swag-paypal-pos.tabTitle.settings\')">\n                                    {{ $tc(\'swag-paypal-pos.tabTitle.settings\') }}\n                                </sw-tabs-item>\n                            {% endblock %}\n\n                            {%  block swag_paypal_pos_content_tab_runs %}\n                                <sw-tabs-item :route="{ name: \'swag.paypal.pos.detail.runs\', params: { id: $route.params.id } }"\n                                              :title="$tc(\'swag-paypal-pos.tabTitle.runs\')">\n                                    {{ $tc(\'swag-paypal-pos.tabTitle.runs\') }}\n                                </sw-tabs-item>\n                            {% endblock %}\n\n                            {%  block swag_paypal_pos_content_tab_help %}\n                                <sw-tabs-item href="https://www.izettle.com/help/articles/1083274-what-is-pos"\n                                              target="_blank"\n                                              :title="$tc(\'swag-paypal-pos.tabTitle.help\')">\n                                    {{ $tc(\'swag-paypal-pos.tabTitle.help\') }}\n                                    <sw-icon name="default-action-external"\n                                             size="8px">\n                                    </sw-icon>\n                                </sw-tabs-item>\n                            {% endblock %}\n                        </sw-tabs>\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_content_account %}\n                        <swag-paypal-pos-account :lastRun="lastRun"\n                                                 :salesChannel="salesChannel">\n                        </swag-paypal-pos-account>\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_content_card %}\n                        <router-view v-if="!isLoading"\n                                     :key="$route.params.id"\n                                     :salesChannel="salesChannel"\n                                     :cloneSalesChannelId="cloneSalesChannelId"\n                                     :lastRun="lastRun"\n                                     :lastCompleteRun="lastCompleteRun"\n                                     @buttons-update="updateButtons"\n                                     @load-sales-channel="loadSalesChannel"\n                                     @run-update="loadLastRun"\n                                     @update-clone-sales-channel="updateCloneSalesChannel">\n                        </router-view>\n                        <sw-loader v-if="isLoading"></sw-loader>\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_disclaimer_hero %}\n                        <sw-card v-show="!isLoading"\n                                 class="swag-paypal-pos__disclaimer-card"\n                                 :hero="true">\n\n                            {% block swag_paypal_pos_disclaimer_container %}\n                                <div class="swag-paypal-pos__disclaimer">\n\n                                    {% block swag_paypal_pos_disclaimer_title %}\n                                        <div class="swag-paypal-pos__disclaimer-title disclaimer-content">\n                                            {{ $tc(\'swag-paypal-pos.detail.disclaimer.headline\') }}\n                                        </div>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_pos_disclaimer_subtitle %}\n                                        <div class="swag-paypal-pos__disclaimer-subtitle disclaimer-content">\n                                            {{ $tc(\'swag-paypal-pos.detail.disclaimer.subheadline\') }}\n                                        </div>\n                                    {% endblock %}\n\n                                    {% block swag_paypal_pos_disclaimer_link %}\n                                        <a :href="$tc(\'swag-paypal-pos.detail.disclaimer.linkTarget\')"\n                                           class="link swag-paypal-pos__disclaimer-link disclaimer-content"\n                                           target="_blank">\n                                            {{ $tc(\'swag-paypal-pos.detail.disclaimer.linkText\') }}\n                                        </a>\n                                    {% endblock %}\n                                </div>\n                            {% endblock %}\n                        </sw-card>\n                    {% endblock %}\n                </sw-card-view>\n            </template>\n        {% endblock %}\n    </sw-page>\n{% endblock %}\n'},y9n1:function(e,a){e.exports='<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="#758CA3" fill-rule="evenodd" d="M12.0098575,0 C5.37725306,0 0,5.36842105 0,11.9901316 C0,17.0723684 3.16309004,21.4144737 7.63095472,23.1611842 C7.5222235,22.2138158 7.43326159,20.7532895 7.67049334,19.7171053 C7.88795578,18.7796053 9.07411455,13.7565789 9.07411455,13.7565789 C9.07411455,13.7565789 8.71826692,13.0361842 8.71826692,11.9802632 C8.71826692,10.3125 9.68696324,9.06907895 10.8928913,9.06907895 C11.9208956,9.06907895 12.4151284,9.83881579 12.4151284,10.7565789 C12.4151284,11.7828947 11.7627411,13.3223684 11.4167781,14.7532895 C11.1301231,15.9473684 12.0197421,16.9243421 13.1960163,16.9243421 C15.331102,16.9243421 16.971955,14.6743421 16.971955,11.4375 C16.971955,8.56578947 14.9060618,6.5625 11.9505495,6.5625 C8.53045845,6.5625 6.5238732,9.11842105 6.5238732,11.7631579 C6.5238732,12.7894737 6.91925946,13.8947368 7.41349228,14.4967105 C7.51233884,14.6151316 7.5222235,14.7236842 7.49256953,14.8421053 C7.40360762,15.2171053 7.19602984,16.0361842 7.15649121,16.2039474 C7.10706793,16.4210526 6.9785674,16.4703947 6.7512203,16.3618421 C5.24875253,15.6611842 4.30971018,13.4802632 4.30971018,11.7138158 C4.30971018,7.93421053 7.05764465,4.46052632 12.2470892,4.46052632 C16.4085296,4.46052632 19.6506969,7.42105263 19.6506969,11.3881579 C19.6506969,15.5230263 17.0411476,18.8486842 13.4233633,18.8486842 C12.2075506,18.8486842 11.0609305,18.2171053 10.6754289,17.4671053 C10.6754289,17.4671053 10.0724648,19.7565789 9.92419499,20.3190789 C9.65730927,21.3651316 8.9258447,22.6677632 8.43161188,23.4671053 C9.55846271,23.8125 10.7446215,24 11.9900882,24 C18.6226926,24 24,18.6315789 24,12.0098684 C24.019715,5.36842105 18.6424619,0 12.0098575,0 Z"></path></svg>'},z8JU:function(e,a){e.exports='{% block swag_paypal_pos_detail_settings %}\n    <div class="swag-paypal-pos-detail-settings">\n\n        {% block swag_paypal_pos_detail_settings_alert %}\n            <sw-alert class="swag-paypal-pos-detail-settings__save-alert">\n                {{ $tc(\'swag-paypal-pos.detail.settings.saveAlert\') }}\n            </sw-alert>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_settings_basic %}\n            <sw-card :isLoading="isLoading" :title="$tc(\'swag-paypal-pos.detail.settings.titleGeneralSettings\')">\n                <sw-container columns="1fr 200px" gap="0px 30px">\n\n                    {% block swag_paypal_pos_detail_settings_input_name %}\n                        <sw-text-field v-model="salesChannel.name"\n                                       required\n                                       type="text"\n                                       validation="required"\n                                       :error="salesChannelNameError"\n                                       :label="$tc(\'sw-sales-channel.detail.labelInputName\')"\n                                       :placeholder="placeholder(salesChannel, \'name\', $tc(\'sw-sales-channel.detail.placeholderName\'))">\n                        </sw-text-field>\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_detail_settings_input_active %}\n                        <sw-switch-field v-model="salesChannel.active"\n                                         bordered\n                                         :label="$tc(\'sw-sales-channel.detail.labelInputActive\')"\n                                         :helpText="$tc(\'swag-paypal-pos.detail.settings.activeHelpText\')">\n                        </sw-switch-field>\n                    {% endblock %}\n\n                </sw-container>\n\n                {% block swag_paypal_pos_detail_settings_input_media_domain %}\n                    <swag-paypal-pos-url-field v-model="swagPaypalPosSalesChannel.mediaDomain"\n                                                   required\n                                                   validation="required"\n                                                   :error="swagPaypalPosSalesChannelMediaDomainError"\n                                                   :label="$tc(\'swag-paypal-pos.detail.settings.domain\')"\n                                                   :helpText="$tc(\'swag-paypal-pos.detail.settings.domainHelpText\')"\n                                                   @input="forceUpdate">\n                    </swag-paypal-pos-url-field>\n                {% endblock %}\n\n                {% block swag_paypal_pos_detail_settings_input_product_stream %}\n                    {# ToDo PPI-56 implement support for product streams #}\n                    <sw-entity-single-select v-if="false"\n                                             v-model="swagPaypalPosSalesChannel.productStreamId"\n                                             entity="product_stream"\n                                             :label="$tc(\'swag-paypal-pos.detail.settings.productStream\')"\n                                             @input="forceUpdate">\n                    </sw-entity-single-select>\n                {% endblock %}\n\n            </sw-card>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_settings_sync %}\n            <div class="sw-sales-channel-detail-sync">\n                <sw-card :isLoading="isLoading" :title="$tc(\'swag-paypal-pos.detail.settings.titleSync\')">\n\n                    {% block swag_paypal_pos_detail_settings_sync_input %}\n                        <swag-paypal-pos-boolean-radio\n                            v-model="swagPaypalPosSalesChannel.replace"\n                            class="swag-paypal-pos-detail-settings__sync-replace-input"\n                            :label="$tc(\'swag-paypal-pos.wizard.syncLibrary.description\')"\n                            :optionTrue="optionReplace"\n                            :optionFalse="optionAdd"\n                            @input="forceUpdate">\n                        </swag-paypal-pos-boolean-radio>\n                    {% endblock %}\n\n                </sw-card>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_settings_prices %}\n            <div class="sw-sales-channel-detail-prices">\n                <sw-card :isLoading="isLoading" :title="$tc(\'swag-paypal-pos.detail.settings.titlePrices\')">\n\n                    {% block swag_paypal_pos_detail_settings_prices_input %}\n                        <swag-paypal-pos-boolean-radio\n                            v-model="swagPaypalPosSalesChannel.syncPrices"\n                            class="swag-paypal-pos-detail-settings__sync-prices-input"\n                            :label="$tc(\'swag-paypal-pos.wizard.syncPrices.description\')"\n                            :optionTrue="optionSyncPrices"\n                            :optionFalse="optionNotSyncPrices"\n                            @input="forceUpdate">\n                        </swag-paypal-pos-boolean-radio>\n                    {% endblock %}\n\n                </sw-card>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_settings_credentials %}\n            <div class="sw-sales-channel-detail-credentials">\n                <sw-card :isLoading="isLoading" :title="$tc(\'swag-paypal-pos.detail.settings.titleCredentials\')">\n\n                    {% block swag_paypal_pos_detail_settings_credentials_apikey %}\n                        <sw-password-field v-model="swagPaypalPosSalesChannel.apiKey"\n                                           class="swag-paypal-pos-detail-settings__apikey-field"\n                                           required\n                                           :label="$tc(\'swag-paypal-pos.authentication.labelApiKey\')"\n                                           :placeholder="$tc(\'swag-paypal-pos.authentication.placeholderApiKey\')"\n                                           @input="forceUpdate">\n                            <template #suffix>\n\n                                {% block swag_paypal_pos_detail_settings_credentials_apikey_suffix %}\n                                    <sw-icon name="default-lock-key"\n                                             class="swag-paypal-pos-detail-settings__apikey-suffix"\n                                             size="22px">\n                                    </sw-icon>\n                                {% endblock %}\n                            </template>\n                        </sw-password-field>\n                    {% endblock %}\n\n                    {% block swag_paypal_pos_detail_settings_credentials_apikey_description %}\n                        <div class="swag-paypal-pos-detail-settings__apikey-description">\n\n                            {% block swag_paypal_pos_detail_settings_credentials_apikey_description_text %}\n                                <div class="swag-paypal-pos-detail-settings__apikey-description-text">\n                                    {{ $tc(\'swag-paypal-pos.authentication.apiKeyDescription\') }}\n                                </div>\n                            {% endblock %}\n\n                            {% block swag_paypal_pos_detail_settings_credentials_apikey_description_link %}\n                                <a :href="apiKeyUrl"\n                                   target="_blank"\n                                   class="link swag-paypal-pos-detail-settings__apikey-description-link">\n\n                                    {% block swag_paypal_pos_detail_settings_credentials_apikey_description_link_text %}\n                                        {{ $tc(\'swag-paypal-pos.authentication.buttonGenerateKey\') }}\n                                        <sw-icon class="swag-paypal-pos-detail-settings__link-icon"\n                                                 name="default-action-external"\n                                                 size="10px">\n                                        </sw-icon>\n                                    {% endblock %}\n                                </a>\n                            {% endblock %}\n                        </div>\n                    {% endblock %}\n\n                </sw-card>\n            </div>\n        {% endblock %}\n\n        {% block swag_paypal_pos_detail_settings_options %}\n            <sw-card :title="$tc(\'swag-paypal-pos.detail.settings.optionsTitle\')" :isLoading="isLoading">\n                <template #grid>\n                    <sw-container rows="auto auto">\n\n                        {% block swag_paypal_pos_detail_settings_options_reset %}\n                            <sw-card-section>\n                                <sw-container columns="1fr 175px" gap="0px 30px" class="swag-paypal-pos-detail-settings__reset-sync">\n\n                                    {% block sw_sales_channel_detail_base_options_reset_text %}\n                                        <div class="swag-paypal-pos-detail-settings__options-description-text">\n                                            {{ $tc(\'swag-paypal-pos.detail.settings.reset.descriptionText\') }}\n                                        </div>\n                                    {% endblock %}\n\n                                    {% block sw_sales_channel_detail_base_options_reset_button %}\n                                        <div class="swag-paypal-pos-detail-settings__options-button">\n                                            <sw-button size="small"\n                                                       @click="showResetModal = true">\n                                                {{ $tc(\'swag-paypal-pos.detail.settings.reset.buttonTitle\') }}\n                                            </sw-button>\n                                        </div>\n                                    {% endblock %}\n\n                                </sw-container>\n                            </sw-card-section>\n                        {% endblock %}\n\n                        {% block swag_paypal_pos_detail_settings_options_delete %}\n                            <sw-card-section divider="top">\n                                <sw-container columns="1fr 175px" gap="0px 30px" class="sw-sales-channel-detail-settings__delete-sales-channel">\n\n                                    {% block sw_sales_channel_detail_base_options_delete_text %}\n                                        <div class="swag-paypal-pos-detail-settings__options-description-text">\n                                            <strong>{{ $tc(\'global.default.warning\') }}</strong>\n                                            {{ $tc(\'sw-sales-channel.detail.textDeleteSalesChannelWarning\') }}\n                                        </div>\n                                    {% endblock %}\n\n                                    {% block sw_sales_channel_detail_base_options_delete_button %}\n                                        <div class="swag-paypal-pos-detail-settings__options-button">\n                                            <sw-button\n                                                variant="danger"\n                                                size="small"\n                                                @click="showDeleteModal = true">\n                                                {{ $tc(\'sw-sales-channel.detail.buttonDelete\') }}\n                                            </sw-button>\n                                        </div>\n                                    {% endblock %}\n\n                                </sw-container>\n                            </sw-card-section>\n                        {% endblock %}\n\n                    </sw-container>\n                </template>\n\n                {% block swag_paypal_pos_detail_settings_options_reset_modal %}\n                    <sw-modal v-if="showResetModal"\n                              class="swag-paypal-pos-detail-settings__reset-sync-modal"\n                              ref="modal"\n                              variant="small"\n                              :title="$tc(\'swag-paypal-pos.detail.settings.reset.modalTitle\')"\n                              @modal-close="showResetModal = false">\n\n                        {% block swag_paypal_pos_detail_settings_options_reset_modal_confirmtext %}\n                            <p class="swag-paypal-pos-detail-settings__reset-modal-confirm-text">\n                                {{ $tc(\'swag-paypal-pos.detail.settings.reset.modalConfirmText\') }}\n                            </p>\n                            <p class="swag-paypal-pos-detail-settings__reset-modal-name">\n                                <strong>{{ placeholder(salesChannel, \'name\') }}</strong>\n                            </p>\n                            <p>{{ $tc(\'swag-paypal-pos.detail.settings.reset.modalTextInfo\') }}</p>\n                        {% endblock %}\n\n                        {% block sw_sales_channel_detail_options_reset_modal_footer %}\n                            <template #modal-footer>\n\n                                {% block swag_paypal_pos_detail_settings_options_reset_modal_abort %}\n                                    <sw-button size="small" @click="showResetModal = false">\n                                        {{ $tc(\'global.default.cancel\') }}\n                                    </sw-button>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_detail_settings_options_reset_modal_confirm %}\n                                    <sw-button size="small"\n                                               variant="danger"\n                                               @click="onConfirmReset">\n                                        {{ $tc(\'swag-paypal-pos.detail.settings.reset.modalButtonConfirm\') }}\n                                    </sw-button>\n                                {% endblock %}\n\n                            </template>\n                        {% endblock %}\n\n                    </sw-modal>\n                {% endblock %}\n\n                {% block swag_paypal_pos_detail_settings_options_delete_modal %}\n                    <sw-modal v-if="showDeleteModal"\n                              class="sw-sales-channel-detail-settings__delete-modal"\n                              ref="modal"\n                              variant="small"\n                              :title="$tc(\'sw-sales-channel.detail.deleteModalTitle\')"\n                              @modal-close="showDeleteModal = false">\n\n                        {% block swag_paypal_pos_detail_settings_options_delete_modal_confirmtext %}\n                            <p class="sw-sales-channel-detail-settings__delete-modal-confirm-text">\n                                {{ $tc(\'sw-sales-channel.detail.textConfirmDelete\') }}\n                            </p>\n                            <p class="sw-sales-channel-detail-settings__delete-modal-name">\n                                <strong>{{ placeholder(salesChannel, \'name\') }}</strong>\n                            </p>\n                            <p>{{ $tc(\'sw-sales-channel.detail.textDeleteInfo\') }}</p>\n                        {% endblock %}\n\n                        {% block sw_sales_channel_detail_options_delete_modal_footer %}\n                            <template #modal-footer>\n\n                                {% block swag_paypal_pos_detail_settings_options_delete_modal_abort %}\n                                    <sw-button size="small" @click="showDeleteModal = false">\n                                        {{ $tc(\'global.default.cancel\') }}\n                                    </sw-button>\n                                {% endblock %}\n\n                                {% block swag_paypal_pos_detail_settings_options_delete_modal_confirm %}\n                                    <sw-button size="small"\n                                               variant="danger"\n                                               @click="onConfirmDelete">\n                                        {{ $tc(\'sw-sales-channel.detail.buttonConfirmDelete\') }}\n                                    </sw-button>\n                                {% endblock %}\n\n                            </template>\n                        {% endblock %}\n\n                    </sw-modal>\n                {% endblock %}\n\n            </sw-card>\n        {% endblock %}\n\n    </div>\n{% endblock %}\n'},zrgI:function(e,a,n){var t=n("Fnts");"string"==typeof t&&(t=[[e.i,t,""]]),t.locals&&(e.exports=t.locals);(0,n("SZ7m").default)("70b5438d",t,!0,{})},zzyi:function(e,a){e.exports='{% block swag_paypal_pos_status_view %}\n    <swag-paypal-pos-status :disabled="disabled"\n                            :disabledText="$tc(\'swag-paypal-pos.detail.overview.status.disabled\')"\n                            :icon="statusIcon"\n                            :subIcon="statusIconComplete"\n                            :iconAnimated="isSyncing"\n                            :isLoading="isLoading || status === null"\n                            :status="statusTitle"\n                            :showSubStatus="incompleteLastRun"\n                            :title="$tc(\'swag-paypal-pos.detail.overview.titleSync\')"\n                            :variant="statusVariant"\n                            :subVariant="statusCompleteErrorLevel">\n\n        {% block swag_paypal_pos_status_view_actions %}\n            <template #actions>\n                <slot name="actions"></slot>\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_view_detail %}\n            <template #detail v-if="isSyncing">\n\n                {% block swag_paypal_pos_status_view_detail_syncing %}\n                    {{ $tc(\'swag-paypal-pos.detail.overview.status.syncingDetail\') }}\n                {% endblock %}\n            </template>\n            <template #detail v-else-if="lastFinishedRun">\n                <div>\n\n                    {% block swag_paypal_pos_status_view_detail_static %}\n                        {{ $tc(\'swag-paypal-pos.detail.overview.status.lastSynced\') }}:\n                        {{ lastFinishedRun.updatedAt | date({\n                                hour: \'2-digit\',\n                                minute: \'2-digit\',\n                                second: \'2-digit\',\n                                day: \'2-digit\',\n                                month: \'short\',\n                                year: \'numeric\'\n                            })\n                        }}\n                    {% endblock %}\n                </div>\n\n                {% block swag_paypal_pos_status_view_detail_errors %}\n                    <sw-alert v-if="syncErrors"\n                              variant="error"\n                              :closable="true"\n                              :title="$tc(\'swag-paypal-pos.detail.overview.syncErrorTitle\')">\n                        <ul>\n                            <li v-for="error in syncErrors">{{ error.detail }} ({{ error.code }})</li>\n                        </ul>\n                    </sw-alert>\n                {% endblock %}\n            </template>\n        {% endblock %}\n\n        {% block swag_paypal_pos_status_view_substatus %}\n            <template #substatus v-if="incompleteLastRun">\n                {{ $tc(\'swag-paypal-pos.detail.overview.status.lastSyncedComplete\') }}:\n                {{ lastCompleteRun.updatedAt | date({\n                        hour: \'2-digit\',\n                        minute: \'2-digit\',\n                        second: \'2-digit\',\n                        day: \'2-digit\',\n                        month: \'short\',\n                        year: \'numeric\'\n                    })\n                }}\n            </template>\n        {% endblock %}\n    </swag-paypal-pos-status>\n{% endblock %}\n'}},[["R7U6","runtime","vendors-node"]]]);